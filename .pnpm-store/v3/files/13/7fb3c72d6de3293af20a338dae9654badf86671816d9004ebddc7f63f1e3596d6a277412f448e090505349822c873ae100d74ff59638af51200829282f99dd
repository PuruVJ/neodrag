import n from"../../options/index.js";import*as t from"fs";import{dirname as u}from"path";import s from"../deepmerge.js";var h=async(e,i)=>{i=s(n.pipeline,i);for(const[p,f]of e.results)try{if(e.pipe.current.inputPath=f,e.pipe.current.outputPath=p,e.pipe.current.fileSizeBefore=(await t.promises.stat(e.pipe.current.inputPath)).size,i.read&&i.wrote){e.pipe.current.buffer=await i.read(e.pipe.current);const o=await i.wrote(e.pipe.current);if(!o)continue;if(e.pipe.current.buffer=o,i.passed&&await i.passed(e.pipe.current)){try{await t.promises.access(u(e.pipe.current.outputPath),t.constants.W_OK)}catch{await t.promises.mkdir(u(e.pipe.current.outputPath),{recursive:!0})}if(await t.promises.writeFile(e.pipe.current.outputPath,e.pipe.current.buffer,"utf-8"),e.pipe.current.fileSizeAfter=(await t.promises.stat(e.pipe.current.outputPath)).size,e.pipe.debug>0&&(e.pipe.files++,i.changed&&(e.pipe=await i.changed(e.pipe))),e.pipe.debug>1&&typeof i.accomplished=="function"){const r=await i.accomplished(e.pipe.current);(!r||r.length>0)&&console.log(r)}}}}catch{if(e.results.delete(p),typeof i.failed=="function"){const r=await i.failed(e.pipe.current);(!r||r.length>0)&&console.log(r)}}if(e.pipe.debug>0&&e.results.size>0&&typeof i.fulfilled=="function"){const p=await i.fulfilled(e.pipe);(!p||p.length>0)&&console.log(p)}return e};export{h as default};
