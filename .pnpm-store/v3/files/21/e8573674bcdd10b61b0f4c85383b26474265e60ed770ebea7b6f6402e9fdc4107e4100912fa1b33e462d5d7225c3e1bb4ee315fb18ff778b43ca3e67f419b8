import p from"./lib/format-bytes.js";import{optimize as m}from"svgo";import o from"files-pipeline/dist/lib/deepmerge.js";import c from"files-pipeline/dist/options/index.js";import f from"./options/index.js";import{files as u}from"files-pipeline";import{minify as l}from"csso";import{minify as d}from"html-minifier-terser";import h from"sharp";import{minify as g}from"terser";import y from"./lib/sharp-read.js";var I=(t={})=>{for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&t[r]===!0&&(t[r]=f[r]);t=o(f,t);const s=new Set;if(typeof t.path<"u")if(t.path instanceof Array||t.path instanceof Set)for(const r of t.path)s.add(r);else s.add(t.path);return{name:"astro-compress",hooks:{"astro:build:done":async()=>{for(const[r,a]of Object.entries(t))for(const n of s)await(await(await(await new u(t.logger).in(n)).by((()=>{switch(r){case"css":return"**/*.css";case"html":return"**/*.html";case"js":return"**/*.{js,mjs,cjs}";case"img":return"**/*.{avci,avcs,avif,avifs,gif,heic,heics,heif,heifs,jfif,jif,jpe,jpeg,jpg,png,raw,tiff,webp}";case"svg":return"**/*.svg";default:return""}})())).not(t.exclude)).pipeline(o(f.pipeline,{wrote:async e=>{switch(r){case"css":return l(e.buffer.toString(),a).css;case"html":return await d(e.buffer.toString(),a);case"js":{const{code:i}=await g(e.buffer.toString(),a);return i||e.buffer}case"img":return y(a,e);case"svg":{const{data:i}=m(e.buffer.toString(),a);return typeof i<"u"?i:e.buffer}default:return e.buffer}},read:async e=>{switch(r){case"img":return h(e.inputPath,{failOn:"none",sequentialRead:!0,unlimited:!0});default:return await c.pipeline.read(e)}},fulfilled:async e=>e.files>0?`Successfully compressed a total of ${e.files} ${r.toUpperCase()} ${e.files===1?"file":"files"} for ${await p(e.info.total)}.`:!1}))}}}};export{I as default};
