{"version":3,"file":"emmet.es.js","sources":["../src/markup/attributes.ts","../src/markup/utils.ts","../src/markup/snippets.ts","../src/output-stream.ts","../src/markup/implicit-tag.ts","../src/markup/lorem/latin.json","../src/markup/lorem/russian.json","../src/markup/lorem/spanish.json","../src/markup/lorem/index.ts","../src/markup/addon/jsx.ts","../src/markup/addon/xsl.ts","../src/markup/addon/bem.ts","../src/markup/format/walk.ts","../src/markup/format/utils.ts","../src/markup/format/template.ts","../src/markup/format/comment.ts","../src/markup/format/html.ts","../src/markup/format/indent-format.ts","../src/markup/format/haml.ts","../src/markup/format/slim.ts","../src/markup/format/pug.ts","../src/markup/index.ts","../src/stylesheet/snippets.ts","../src/stylesheet/score.ts","../src/stylesheet/color.ts","../src/stylesheet/format.ts","../src/stylesheet/index.ts","../snippets/html.json","../snippets/css.json","../snippets/xsl.json","../snippets/pug.json","../snippets/variables.json","../src/config.ts","../src/extract-abbreviation/reader.ts","../src/extract-abbreviation/quotes.ts","../src/extract-abbreviation/brackets.ts","../src/extract-abbreviation/is-html.ts","../src/extract-abbreviation/index.ts","../src/index.ts"],"sourcesContent":["import { AbbreviationAttribute, AbbreviationNode, Value } from '@emmetio/abbreviation';\nimport { Config } from '../config';\n\n/**\n * Merges attributes in current node: de-duplicates attributes with the same name\n * and merges class names\n */\nexport default function mergeAttributes(node: AbbreviationNode, config: Config) {\n    if (!node.attributes) {\n        return;\n    }\n\n    const attributes: AbbreviationAttribute[] = [];\n    const lookup: { [name: string]: AbbreviationAttribute } = {};\n\n    for (const attr of node.attributes) {\n        if (attr.name) {\n            const attrName = attr.name;\n            if (attrName in lookup) {\n                const prev = lookup[attrName];\n                if (attrName === 'class') {\n                    prev.value = mergeValue(prev.value, attr.value, ' ');\n                } else {\n                    mergeDeclarations(prev, attr, config);\n                }\n            } else {\n                // Create new attribute instance so we can safely modify it later\n                attributes.push(lookup[attrName] = { ...attr });\n            }\n        } else {\n            attributes.push(attr);\n        }\n    }\n\n    node.attributes = attributes;\n}\n\n/**\n * Merges two token lists into single list. Adjacent strings are merged together\n */\nfunction mergeValue(prev?: Value[], next?: Value[], glue?: string): Value[] | undefined {\n    if (prev && next) {\n        if (prev.length && glue) {\n            append(prev, glue);\n        }\n\n        for (const t of next) {\n            append(prev, t);\n        }\n\n        return prev;\n    }\n\n    const result = prev || next;\n    return result && result.slice();\n}\n\n/**\n * Merges data from `src` attribute into `dest` and returns it\n */\nfunction mergeDeclarations(dest: AbbreviationAttribute, src: AbbreviationAttribute, config: Config): AbbreviationAttribute {\n    dest.name = src.name;\n\n    if (!config.options['output.reverseAttributes']) {\n        dest.value = src.value;\n    }\n\n    // Keep high-priority properties\n    if (!dest.implied) {\n        dest.implied = src.implied;\n    }\n\n    if (!dest.boolean) {\n        dest.boolean = src.boolean;\n    }\n\n    if (dest.valueType !== 'expression') {\n        dest.valueType = src.valueType;\n    }\n\n    return dest;\n}\n\nfunction append(tokens: Value[], value: Value) {\n    const lastIx = tokens.length - 1;\n    if (typeof tokens[lastIx] === 'string' && typeof value === 'string') {\n        tokens[lastIx] += value;\n    } else {\n        tokens.push(value);\n    }\n}\n","import { Abbreviation, AbbreviationNode } from '@emmetio/abbreviation';\n\nexport type Container = Abbreviation | AbbreviationNode;\nexport type WalkVisitor<S> = (node: AbbreviationNode, ancestors: Container[], state?: S) => void;\n\n/**\n * Walks over each child node of given markup abbreviation AST node (not including\n * given one) and invokes `fn` on each node.\n * The `fn` callback accepts context node, list of ancestor nodes and optional\n * state object\n */\nexport function walk<S>(node: Container, fn: WalkVisitor<S>, state?: S) {\n    const ancestors: Container[] = [node];\n    const callback = (ctx: AbbreviationNode) => {\n        fn(ctx, ancestors, state);\n        ancestors.push(ctx);\n        ctx.children.forEach(callback);\n        ancestors.pop();\n    };\n\n    node.children.forEach(callback);\n}\n\n/**\n * Finds node which is the deepest for in current node or node itself.\n */\nexport function findDeepest(node: Container): { node: Container, parent?: Container } {\n    let parent: Container | undefined;\n    while (node.children.length) {\n        parent = node;\n        node = node.children[node.children.length - 1];\n    }\n\n    return { parent, node };\n}\n\nexport function isNode(node: Container): node is AbbreviationNode {\n    return node.type === 'AbbreviationNode';\n}\n","import parse, { AbbreviationNode, AbbreviationAttribute, Abbreviation } from '@emmetio/abbreviation';\nimport { findDeepest, isNode, Container } from './utils';\nimport { Config } from '../config';\n\n/**\n * Finds matching snippet from `registry` and resolves it into a parsed abbreviation.\n * Resolved node is then updated or replaced with matched abbreviation tree.\n *\n * A HTML registry basically contains aliases to another Emmet abbreviations,\n * e.g. a predefined set of name, attributes and so on, possibly a complex\n * abbreviation with multiple elements. So we have to get snippet, parse it\n * and recursively resolve it.\n */\nexport default function resolveSnippets(abbr: Abbreviation, config: Config): Abbreviation {\n    const stack: string[] = [];\n    const reversed = config.options['output.reverseAttributes'];\n\n    const resolve = (child: AbbreviationNode): Abbreviation | null => {\n        const snippet = child.name && config.snippets[child.name];\n        // A snippet in stack means circular reference.\n        // It can be either a user error or a perfectly valid snippet like\n        // \"img\": \"img[src alt]/\", e.g. an element with predefined shape.\n        // In any case, simply stop parsing and keep element as is\n        if (!snippet || stack.includes(snippet)) {\n            return null;\n        }\n\n        const snippetAbbr = parse(snippet, config);\n        stack.push(snippet);\n        walkResolve(snippetAbbr, resolve, config);\n        stack.pop();\n\n        // Add attributes from current node into every top-level node of parsed abbreviation\n        for (const topNode of snippetAbbr.children) {\n            if (child.attributes) {\n                const from: AbbreviationAttribute[] = topNode.attributes || [];\n                const to: AbbreviationAttribute[] = child.attributes || [];\n                topNode.attributes = reversed ? to.concat(from) : from.concat(to);\n            }\n            mergeNodes(child, topNode);\n        }\n\n        return snippetAbbr;\n    };\n\n    walkResolve(abbr, resolve, config);\n    return abbr;\n}\n\nfunction walkResolve(node: Container, resolve: (node: AbbreviationNode) => Abbreviation | null, config: Config): AbbreviationNode[] {\n    let children: AbbreviationNode[] = [];\n\n    for (const child of node.children) {\n        const resolved = resolve(child);\n        if (resolved) {\n            children = children.concat(resolved.children);\n\n            const deepest = findDeepest(resolved);\n            if (isNode(deepest.node)) {\n                deepest.node.children = deepest.node.children.concat(walkResolve(child, resolve, config));\n            }\n        } else {\n            children.push(child);\n            child.children = walkResolve(child, resolve, config);\n        }\n    }\n\n    return node.children = children;\n}\n\n/**\n * Adds data from first node into second node\n */\nfunction mergeNodes(from: AbbreviationNode, to: AbbreviationNode) {\n    if (from.selfClosing) {\n        to.selfClosing = true;\n    }\n\n    if (from.value != null) {\n        to.value = from.value;\n    }\n\n    if (from.repeat) {\n        to.repeat = from.repeat;\n    }\n}\n","import { AbbreviationAttribute, AbbreviationNode } from '@emmetio/abbreviation';\nimport { Config, Options, StringCase } from './config';\n\nexport interface OutputStream {\n    options: Options;\n    value: string;\n    level: number;\n    offset: number;\n    line: number;\n    column: number;\n}\n\nexport default function createOutputStream(options: Options, level = 0): OutputStream {\n    return {\n        options,\n        value: '',\n        level,\n        offset: 0,\n        line: 0,\n        column: 0\n    };\n}\n\n/**\n * Pushes plain string into output stream without newline processing\n */\nexport function push(stream: OutputStream, text: string) {\n    const processText = stream.options['output.text'];\n    _push(stream, processText(text, stream.offset, stream.line, stream.column));\n}\n\n/**\n * Pushes given string with possible newline formatting into output\n */\nexport function pushString(stream: OutputStream, value: string) {\n    // If given value contains newlines, we should push content line-by-line and\n    // use `pushNewline()` to maintain proper line/column state\n    const lines = splitByLines(value);\n\n    for (let i = 0, il = lines.length - 1; i <= il; i++) {\n        push(stream, lines[i]);\n        if (i !== il) {\n            pushNewline(stream, true);\n        }\n    }\n}\n\n/**\n * Pushes new line into given output stream\n */\nexport function pushNewline(stream: OutputStream, indent?: boolean | number) {\n    const baseIndent = stream.options['output.baseIndent'];\n    const newline = stream.options['output.newline'];\n    push(stream, newline + baseIndent);\n    stream.line++;\n    stream.column = baseIndent.length;\n    if (indent) {\n        pushIndent(stream, indent === true ? stream.level : indent);\n    }\n}\n\n/**\n * Adds indentation of `size` to current output stream\n */\nexport function pushIndent(stream: OutputStream, size = stream.level) {\n    const indent = stream.options['output.indent'];\n    push(stream, indent.repeat(Math.max(size, 0)));\n}\n\n/**\n * Pushes field/tabstop into output stream\n */\nexport function pushField(stream: OutputStream, index: number, placeholder: string) {\n    const field = stream.options['output.field'];\n    // NB: use `_push` instead of `push` to skip text processing\n    _push(stream, field(index, placeholder, stream.offset, stream.line, stream.column));\n}\n\n/**\n * Returns given tag name formatted according to given config\n */\nexport function tagName(name: string, config: Config) {\n    return strCase(name, config.options['output.tagCase']);\n}\n\n/**\n * Returns given attribute name formatted according to given config\n */\nexport function attrName(name: string, config: Config) {\n    return strCase(name, config.options['output.attributeCase']);\n}\n\n/**\n * Returns character for quoting value of given attribute\n */\nexport function attrQuote(attr: AbbreviationAttribute, config: Config, isOpen?: boolean): string {\n    if (attr.valueType === 'expression') {\n        return isOpen ? '{' : '}';\n    }\n\n    return config.options['output.attributeQuotes'] === 'single' ? '\\'' : '\"';\n}\n\n/**\n * Check if given attribute is boolean\n */\nexport function isBooleanAttribute(attr: AbbreviationAttribute, config: Config): boolean {\n    return attr.boolean\n        || config.options['output.booleanAttributes'].includes((attr.name || '').toLowerCase());\n}\n\n/**\n * Returns a token for self-closing tag, depending on current options\n */\nexport function selfClose(config: Config): string {\n    switch (config.options['output.selfClosingStyle']) {\n        case 'xhtml': return ' /';\n        case 'xml': return '/';\n        default: return '';\n    }\n}\n\n/**\n * Check if given tag name belongs to inline-level element\n * @param node Parsed node or tag name\n */\nexport function isInline(node: string | AbbreviationNode, config: Config): boolean {\n    if (typeof node === 'string') {\n        return config.options.inlineElements.includes(node.toLowerCase());\n    }\n\n    // inline node is a node either with inline-level name or text-only node\n    return node.name ? isInline(node.name, config) : Boolean(node.value && !node.attributes);\n}\n\n/**\n * Splits given text by lines\n */\nexport function splitByLines(text: string): string[] {\n    return text.split(/\\r\\n|\\r|\\n/g);\n}\n\n/**\n * Pushes raw string into output stream without any processing\n */\nfunction _push(stream: OutputStream, text: string) {\n    stream.value += text;\n    stream.offset += text.length;\n    stream.column += text.length;\n}\n\nfunction strCase(str: string, type: StringCase) {\n    if (type) {\n        return type === 'upper' ? str.toUpperCase() : str.toLowerCase();\n    }\n\n    return str;\n}\n","import { AbbreviationNode } from '@emmetio/abbreviation';\nimport { isNode, Container } from './utils';\nimport { Config } from '../config';\nimport { isInline } from '../output-stream';\n\nconst elementMap: { [name: string]: string } = {\n    p: 'span',\n    ul: 'li',\n    ol: 'li',\n    table: 'tr',\n    tr: 'td',\n    tbody: 'tr',\n    thead: 'tr',\n    tfoot: 'tr',\n    colgroup: 'col',\n    select: 'option',\n    optgroup: 'option',\n    audio: 'source',\n    video: 'source',\n    object: 'param',\n    map: 'area'\n};\n\nexport default function implicitTag(node: AbbreviationNode, ancestors: Container[], config: Config) {\n    if (!node.name && node.attributes) {\n        resolveImplicitTag(node, ancestors, config);\n    }\n}\n\nexport function resolveImplicitTag(node: AbbreviationNode, ancestors: Container[], config: Config) {\n    const parent = getParentElement(ancestors);\n    const contextName = config.context ? config.context.name : '';\n    const parentName = lowercase(parent ? parent.name : contextName);\n    node.name = elementMap[parentName]\n        || (isInline(parentName, config) ? 'span' : 'div');\n}\n\nfunction lowercase(str?: string): string {\n    return (str || '').toLowerCase();\n}\n\n/**\n * Returns closest element node from given ancestors list\n */\nfunction getParentElement(ancestors: Container[]): AbbreviationNode | undefined {\n    for (let i = ancestors.length - 1; i >= 0; i--) {\n        const elem = ancestors[i];\n        if (isNode(elem)) {\n            return elem;\n        }\n    }\n}\n","{\n\t\"common\": [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipisicing\", \"elit\"],\n\t\"words\": [\"exercitationem\", \"perferendis\", \"perspiciatis\", \"laborum\", \"eveniet\",\n\t\t\"sunt\", \"iure\", \"nam\", \"nobis\", \"eum\", \"cum\", \"officiis\", \"excepturi\",\n\t\t\"odio\", \"consectetur\", \"quasi\", \"aut\", \"quisquam\", \"vel\", \"eligendi\",\n\t\t\"itaque\", \"non\", \"odit\", \"tempore\", \"quaerat\", \"dignissimos\",\n\t\t\"facilis\", \"neque\", \"nihil\", \"expedita\", \"vitae\", \"vero\", \"ipsum\",\n\t\t\"nisi\", \"animi\", \"cumque\", \"pariatur\", \"velit\", \"modi\", \"natus\",\n\t\t\"iusto\", \"eaque\", \"sequi\", \"illo\", \"sed\", \"ex\", \"et\", \"voluptatibus\",\n\t\t\"tempora\", \"veritatis\", \"ratione\", \"assumenda\", \"incidunt\", \"nostrum\",\n\t\t\"placeat\", \"aliquid\", \"fuga\", \"provident\", \"praesentium\", \"rem\",\n\t\t\"necessitatibus\", \"suscipit\", \"adipisci\", \"quidem\", \"possimus\",\n\t\t\"voluptas\", \"debitis\", \"sint\", \"accusantium\", \"unde\", \"sapiente\",\n\t\t\"voluptate\", \"qui\", \"aspernatur\", \"laudantium\", \"soluta\", \"amet\",\n\t\t\"quo\", \"aliquam\", \"saepe\", \"culpa\", \"libero\", \"ipsa\", \"dicta\",\n\t\t\"reiciendis\", \"nesciunt\", \"doloribus\", \"autem\", \"impedit\", \"minima\",\n\t\t\"maiores\", \"repudiandae\", \"ipsam\", \"obcaecati\", \"ullam\", \"enim\",\n\t\t\"totam\", \"delectus\", \"ducimus\", \"quis\", \"voluptates\", \"dolores\",\n\t\t\"molestiae\", \"harum\", \"dolorem\", \"quia\", \"voluptatem\", \"molestias\",\n\t\t\"magni\", \"distinctio\", \"omnis\", \"illum\", \"dolorum\", \"voluptatum\", \"ea\",\n\t\t\"quas\", \"quam\", \"corporis\", \"quae\", \"blanditiis\", \"atque\", \"deserunt\",\n\t\t\"laboriosam\", \"earum\", \"consequuntur\", \"hic\", \"cupiditate\",\n\t\t\"quibusdam\", \"accusamus\", \"ut\", \"rerum\", \"error\", \"minus\", \"eius\",\n\t\t\"ab\", \"ad\", \"nemo\", \"fugit\", \"officia\", \"at\", \"in\", \"id\", \"quos\",\n\t\t\"reprehenderit\", \"numquam\", \"iste\", \"fugiat\", \"sit\", \"inventore\",\n\t\t\"beatae\", \"repellendus\", \"magnam\", \"recusandae\", \"quod\", \"explicabo\",\n\t\t\"doloremque\", \"aperiam\", \"consequatur\", \"asperiores\", \"commodi\",\n\t\t\"optio\", \"dolor\", \"labore\", \"temporibus\", \"repellat\", \"veniam\",\n\t\t\"architecto\", \"est\", \"esse\", \"mollitia\", \"nulla\", \"a\", \"similique\",\n\t\t\"eos\", \"alias\", \"dolore\", \"tenetur\", \"deleniti\", \"porro\", \"facere\",\n\t\t\"maxime\", \"corrupti\"]\n}\n","{\n\t\"common\": [\"далеко-далеко\", \"за\", \"словесными\", \"горами\", \"в стране\", \"гласных\", \"и согласных\", \"живут\", \"рыбные\", \"тексты\"],\n\t\"words\": [\"вдали\", \"от всех\", \"они\", \"буквенных\", \"домах\", \"на берегу\", \"семантика\",\n\t\t\"большого\", \"языкового\", \"океана\", \"маленький\", \"ручеек\", \"даль\",\n\t\t\"журчит\", \"по всей\", \"обеспечивает\", \"ее\",\"всеми\", \"необходимыми\",\n\t\t\"правилами\", \"эта\", \"парадигматическая\", \"страна\", \"которой\", \"жаренные\",\n\t\t\"предложения\", \"залетают\", \"прямо\", \"рот\", \"даже\", \"всемогущая\",\n\t\t\"пунктуация\", \"не\", \"имеет\", \"власти\", \"над\", \"рыбными\", \"текстами\",\n\t\t\"ведущими\", \"безорфографичный\", \"образ\", \"жизни\", \"однажды\", \"одна\",\n\t\t\"маленькая\", \"строчка\",\"рыбного\", \"текста\", \"имени\", \"lorem\", \"ipsum\",\n\t\t\"решила\", \"выйти\", \"большой\", \"мир\", \"грамматики\", \"великий\", \"оксмокс\",\n\t\t\"предупреждал\", \"о\", \"злых\", \"запятых\", \"диких\", \"знаках\", \"вопроса\",\n\t\t\"коварных\", \"точках\", \"запятой\", \"но\", \"текст\", \"дал\", \"сбить\",\n\t\t\"себя\", \"толку\", \"он\", \"собрал\", \"семь\", \"своих\", \"заглавных\", \"букв\",\n\t\t\"подпоясал\", \"инициал\", \"за\", \"пояс\", \"пустился\", \"дорогу\",\n\t\t\"взобравшись\", \"первую\", \"вершину\", \"курсивных\", \"гор\", \"бросил\",\n\t\t\"последний\", \"взгляд\", \"назад\", \"силуэт\", \"своего\", \"родного\", \"города\",\n\t\t\"буквоград\", \"заголовок\", \"деревни\", \"алфавит\", \"подзаголовок\", \"своего\",\n\t\t\"переулка\", \"грустный\", \"реторический\", \"вопрос\", \"скатился\", \"его\",\n\t\t\"щеке\", \"продолжил\", \"свой\", \"путь\", \"дороге\", \"встретил\", \"рукопись\",\n\t\t\"она\", \"предупредила\",  \"моей\", \"все\", \"переписывается\", \"несколько\",\n\t\t\"раз\", \"единственное\", \"что\", \"меня\", \"осталось\", \"это\", \"приставка\",\n\t\t\"возвращайся\", \"ты\", \"лучше\", \"свою\", \"безопасную\", \"страну\", \"послушавшись\",\n\t\t\"рукописи\", \"наш\", \"продолжил\", \"свой\", \"путь\", \"вскоре\", \"ему\",\n\t\t\"повстречался\", \"коварный\", \"составитель\", \"рекламных\", \"текстов\",\n\t\t\"напоивший\", \"языком\", \"речью\", \"заманивший\", \"свое\", \"агентство\",\n\t\t\"которое\", \"использовало\", \"снова\", \"снова\", \"своих\", \"проектах\",\n\t\t\"если\", \"переписали\", \"то\", \"живет\", \"там\", \"до\", \"сих\", \"пор\"]\n}\n","{\n\t\"common\": [\"mujer\", \"uno\", \"dolor\", \"más\", \"de\", \"poder\", \"mismo\", \"si\"],\n\t\"words\": [\"ejercicio\", \"preferencia\", \"perspicacia\", \"laboral\", \"paño\",\n\t\t\"suntuoso\", \"molde\", \"namibia\", \"planeador\", \"mirar\", \"demás\", \"oficinista\", \"excepción\",\n\t\t\"odio\", \"consecuencia\", \"casi\", \"auto\", \"chicharra\", \"velo\", \"elixir\",\n\t\t\"ataque\", \"no\", \"odio\", \"temporal\", \"cuórum\", \"dignísimo\",\n\t\t\"facilismo\", \"letra\", \"nihilista\", \"expedición\", \"alma\", \"alveolar\", \"aparte\",\n\t\t\"león\", \"animal\", \"como\", \"paria\", \"belleza\", \"modo\", \"natividad\",\n\t\t\"justo\", \"ataque\", \"séquito\", \"pillo\", \"sed\", \"ex\", \"y\", \"voluminoso\",\n\t\t\"temporalidad\", \"verdades\", \"racional\", \"asunción\", \"incidente\", \"marejada\",\n\t\t\"placenta\", \"amanecer\", \"fuga\", \"previsor\", \"presentación\", \"lejos\",\n\t\t\"necesariamente\", \"sospechoso\", \"adiposidad\", \"quindío\", \"pócima\",\n\t\t\"voluble\", \"débito\", \"sintió\", \"accesorio\", \"falda\", \"sapiencia\",\n\t\t\"volutas\", \"queso\", \"permacultura\", \"laudo\", \"soluciones\", \"entero\",\n\t\t\"pan\", \"litro\", \"tonelada\", \"culpa\", \"libertario\", \"mosca\", \"dictado\",\n\t\t\"reincidente\", \"nascimiento\", \"dolor\", \"escolar\", \"impedimento\", \"mínima\",\n\t\t\"mayores\", \"repugnante\", \"dulce\", \"obcecado\", \"montaña\", \"enigma\",\n\t\t\"total\", \"deletéreo\", \"décima\", \"cábala\", \"fotografía\", \"dolores\",\n\t\t\"molesto\", \"olvido\", \"paciencia\", \"resiliencia\", \"voluntad\", \"molestias\",\n\t\t\"magnífico\", \"distinción\", \"ovni\", \"marejada\", \"cerro\", \"torre\", \"y\",\n\t\t\"abogada\", \"manantial\", \"corporal\", \"agua\", \"crepúsculo\", \"ataque\", \"desierto\",\n\t\t\"laboriosamente\", \"angustia\", \"afortunado\", \"alma\", \"encefalograma\",\n\t\t\"materialidad\", \"cosas\", \"o\", \"renuncia\", \"error\", \"menos\", \"conejo\",\n\t\t\"abadía\", \"analfabeto\", \"remo\", \"fugacidad\", \"oficio\", \"en\", \"almácigo\", \"vos\", \"pan\",\n\t\t\"represión\", \"números\", \"triste\", \"refugiado\", \"trote\", \"inventor\",\n\t\t\"corchea\", \"repelente\", \"magma\", \"recusado\", \"patrón\", \"explícito\",\n\t\t\"paloma\", \"síndrome\", \"inmune\", \"autoinmune\", \"comodidad\",\n\t\t\"ley\", \"vietnamita\", \"demonio\", \"tasmania\", \"repeler\", \"apéndice\",\n\t\t\"arquitecto\", \"columna\", \"yugo\", \"computador\", \"mula\", \"a\", \"propósito\",\n\t\t\"fantasía\", \"alias\", \"rayo\", \"tenedor\", \"deleznable\", \"ventana\", \"cara\",\n\t\t\"anemia\", \"corrupto\"]\n}\n","import { AbbreviationNode, Repeater } from '@emmetio/abbreviation';\nimport { Container } from '../utils';\nimport { Config } from '../../config';\nimport { resolveImplicitTag } from '../implicit-tag';\nimport latin from './latin.json';\nimport ru from './russian.json';\nimport sp from './spanish.json';\n\ninterface LoremVocabulary {\n    common: string[];\n    words: string[];\n}\n\nconst vocabularies: { [lang: string]: LoremVocabulary } = { ru, sp, latin };\nconst reLorem = /^lorem([a-z]*)(\\d*)(-\\d*)?$/i;\n\nexport default function lorem(node: AbbreviationNode, ancestors: Container[], config: Config) {\n    let m: RegExpMatchArray | null;\n    if (node.name && (m = node.name.match(reLorem))) {\n        const db: LoremVocabulary = vocabularies[m[1]] || vocabularies.latin;\n        const minWordCount = m[2] ? Math.max(1, Number(m[2])) : 30;\n        const maxWordCount = m[3] ? Math.max(minWordCount, Number(m[3].slice(1))) : minWordCount;\n        const wordCount = rand(minWordCount, maxWordCount);\n        const repeat = node.repeat || findRepeater(ancestors);\n\n        node.name = node.attributes = void 0;\n        node.value = [paragraph(db, wordCount, !repeat || repeat.value === 0)];\n\n        if (node.repeat && ancestors.length > 1) {\n            resolveImplicitTag(node, ancestors, config);\n        }\n    }\n}\n\n/**\n * Returns random integer between <code>from</code> and <code>to</code> values\n */\nfunction rand(from: number, to: number): number {\n    return Math.floor(Math.random() * (to - from) + from);\n}\n\nfunction sample(arr: string[], count: number): string[] {\n    const len = arr.length;\n    const iterations = Math.min(len, count);\n    const result: string[] = [];\n\n    while (result.length < iterations) {\n        const str = arr[rand(0, len)];\n        if (!result.includes(str)) {\n            result.push(str);\n        }\n    }\n\n    return result;\n}\n\nfunction choice(val: string): string {\n    return val[rand(0, val.length - 1)];\n}\n\nfunction sentence(words: string[], end?: string): string {\n    if (words.length) {\n        words = [capitalize(words[0])].concat(words.slice(1));\n    }\n\n    return words.join(' ') + (end || choice('?!...')); // more dots than question marks\n}\n\nfunction capitalize(word: string): string {\n    return word[0].toUpperCase() + word.slice(1);\n}\n\n/**\n * Insert commas at randomly selected words. This function modifies values\n * inside `words` array\n */\nfunction insertCommas(words: string[]): string[] {\n    if (words.length < 2) {\n        return words;\n    }\n\n    words = words.slice();\n    const len = words.length;\n    const hasComma = /,$/;\n    let totalCommas = 0;\n\n    if (len > 3 && len <= 6) {\n        totalCommas = rand(0, 1);\n    } else if (len > 6 && len <= 12) {\n        totalCommas = rand(0, 2);\n    } else {\n        totalCommas = rand(1, 4);\n    }\n\n    for (let i = 0, pos: number; i < totalCommas; i++) {\n        pos = rand(0, len - 2);\n        if (!hasComma.test(words[pos])) {\n            words[pos] += ',';\n        }\n    }\n\n    return words;\n}\n\n/**\n * Generate a paragraph of \"Lorem ipsum\" text\n * @param dict Words dictionary\n * @param wordCount Words count in paragraph\n * @param startWithCommon Should paragraph start with common \"lorem ipsum\" sentence.\n */\nfunction paragraph(dict: LoremVocabulary, wordCount: number, startWithCommon: boolean): string {\n    const result: string[] = [];\n    let totalWords = 0;\n    let words: string[];\n\n    if (startWithCommon && dict.common) {\n        words = dict.common.slice(0, wordCount);\n        totalWords += words.length;\n        result.push(sentence(insertCommas(words), '.'));\n    }\n\n    while (totalWords < wordCount) {\n        words = sample(dict.words, Math.min(rand(2, 30), wordCount - totalWords));\n        totalWords += words.length;\n        result.push(sentence(insertCommas(words)));\n    }\n\n    return result.join(' ');\n}\n\nfunction findRepeater(ancestors: Container[]): Repeater | void {\n    for (let i = ancestors.length - 1; i >= 0; i--) {\n        const element = ancestors[i];\n        if (element.type === 'AbbreviationNode' && element.repeat) {\n            return element.repeat;\n        }\n    }\n}\n","import { AbbreviationNode, AbbreviationAttribute } from '@emmetio/abbreviation';\n\n/**\n * JSX transformer: replaces `class` and `for` attributes with `className` and\n * `htmlFor` attributes respectively\n */\nexport default function jsx(node: AbbreviationNode) {\n    if (node.attributes) {\n        node.attributes.forEach(rename);\n    }\n}\n\nfunction rename(attr: AbbreviationAttribute) {\n    if (attr.name === 'class') {\n        attr.name = 'className';\n    } else if (attr.name === 'for') {\n        attr.name = 'htmlFor';\n    }\n}\n","import { AbbreviationNode, AbbreviationAttribute } from '@emmetio/abbreviation';\n\n/**\n * XSL transformer: removes `select` attributes from certain nodes that contain\n * children\n */\nexport default function xsl(node: AbbreviationNode) {\n    if (matchesName(node.name) && node.attributes && (node.children.length || node.value)) {\n        node.attributes = node.attributes.filter(isAllowed);\n    }\n}\n\nfunction isAllowed(attr: AbbreviationAttribute): boolean {\n    return attr.name !== 'select';\n}\n\nfunction matchesName(name?: string): boolean {\n    return name === 'xsl:variable' || name === 'xsl:with-param';\n}\n","import { AbbreviationNode, Value } from '@emmetio/abbreviation';\nimport { Container } from '../utils';\nimport { Config, AbbreviationContext } from '../../config';\n\ninterface BEMAbbreviationNode extends AbbreviationNode {\n    _bem?: BEMData;\n}\n\ninterface BEMAbbreviationContext extends AbbreviationContext {\n    _bem?: BEMData;\n}\n\ninterface BEMData {\n    classNames: string[];\n    block?: string ;\n}\n\nconst reElement = /^(-+)([a-z0-9]+[a-z0-9-]*)/i;\nconst reModifier = /^(_+)([a-z0-9]+[a-z0-9-_]*)/i;\nconst blockCandidates1 = (className: string) => /^[a-z]\\-/i.test(className);\nconst blockCandidates2 = (className: string) => /^[a-z]/i.test(className);\n\nexport default function bem(node: AbbreviationNode, ancestors: Container[], config: Config) {\n    expandClassNames(node);\n    expandShortNotation(node, ancestors, config);\n}\n\n/**\n * Expands existing class names in BEM notation in given `node`.\n * For example, if node contains `b__el_mod` class name, this method ensures\n * that element contains `b__el` class as well\n */\nfunction expandClassNames(node: BEMAbbreviationNode) {\n    const data = getBEMData(node);\n\n    const classNames: string[] = [];\n    for (const cl of data.classNames) {\n        // remove all modifiers and element prefixes from class name to get a base element name\n        const ix = cl.indexOf('_');\n        if (ix > 0 && !cl.startsWith('-')) {\n            classNames.push(cl.slice(0, ix));\n            classNames.push(cl.slice(ix));\n        } else {\n            classNames.push(cl);\n        }\n    }\n\n    if (classNames.length) {\n        data.classNames = classNames.filter(uniqueClass);\n        data.block = findBlockName(data.classNames);\n        updateClass(node, data.classNames.join(' '));\n    }\n}\n\n/**\n * Expands short BEM notation, e.g. `-element` and `_modifier`\n */\nfunction expandShortNotation(node: BEMAbbreviationNode, ancestors: Container[], config: Config) {\n    const data = getBEMData(node);\n    const classNames: string[] = [];\n    const { options } = config;\n    const path = ancestors.slice(1).concat(node) as BEMAbbreviationNode[];\n\n    for (let cl of data.classNames) {\n        let prefix: string = '';\n        let m: RegExpMatchArray | null;\n        const originalClass = cl;\n\n        // parse element definition (could be only one)\n        if (m = cl.match(reElement)) {\n            prefix = getBlockName(path, m[1].length, config.context) + options['bem.element'] + m[2];\n            classNames.push(prefix);\n            cl = cl.slice(m[0].length);\n        }\n\n        // parse modifiers definitions\n        if (m = cl.match(reModifier)) {\n            if (!prefix) {\n                prefix = getBlockName(path, m[1].length);\n                classNames.push(prefix);\n            }\n\n            classNames.push(`${prefix}${options['bem.modifier']}${m[2]}`);\n            cl = cl.slice(m[0].length);\n        }\n\n        if (cl === originalClass) {\n            // class name wasn’t modified: it’s not a BEM-specific class,\n            // add it as-is into output\n            classNames.push(originalClass);\n        }\n    }\n\n    const arrClassNames = classNames.filter(uniqueClass);\n    if (arrClassNames.length) {\n        updateClass(node, arrClassNames.join(' '));\n    }\n}\n\n/**\n * Returns BEM data from given abbreviation node\n */\nfunction getBEMData(node: BEMAbbreviationNode): BEMData {\n    if (!node._bem) {\n        let classValue = '';\n        if (node.attributes) {\n            for (const attr of node.attributes) {\n                if (attr.name === 'class' && attr.value) {\n                    classValue = stringifyValue(attr.value);\n                    break;\n                }\n            }\n        }\n\n        node._bem = parseBEM(classValue);\n    }\n\n    return node._bem;\n}\n\nfunction getBEMDataFromContext(context: BEMAbbreviationContext) {\n    if (!context._bem) {\n        context._bem = parseBEM(context.attributes && context.attributes.class || '');\n    }\n\n    return context._bem;\n}\n\n/**\n * Parses BEM data from given class name\n */\nfunction parseBEM(classValue?: string): BEMData {\n    const classNames = classValue ? classValue.split(/\\s+/) : [];\n    return {\n        classNames,\n        block: findBlockName(classNames)\n    };\n}\n\n/**\n * Returns block name for given `node` by `prefix`, which tells the depth of\n * of parent node lookup\n */\nfunction getBlockName(ancestors: BEMAbbreviationNode[], depth: number = 0, context?: BEMAbbreviationContext): string {\n    const maxParentIx = 0;\n    let parentIx = Math.max(ancestors.length - depth, maxParentIx);\n    do {\n        const parent = ancestors[parentIx];\n        if (parent) {\n            const data = getBEMData(parent as BEMAbbreviationNode);\n            if (data.block) {\n                return data.block;\n            }\n        }\n    } while (maxParentIx < parentIx--);\n\n    if (context) {\n        const data = getBEMDataFromContext(context);\n        if (data.block) {\n            return data.block;\n        }\n    }\n\n    return '';\n}\n\nfunction findBlockName(classNames: string[]): string | undefined {\n    return find(classNames, blockCandidates1)\n        || find(classNames, blockCandidates2)\n        || void 0;\n}\n\n/**\n * Finds class name from given list which may be used as block name\n */\nfunction find(classNames: string[], filter: (className: string) => boolean): string | void {\n    for (const cl of classNames) {\n        if (reElement.test(cl) || reModifier.test(cl)) {\n            break;\n        }\n\n        if (filter(cl)) {\n            return cl;\n        }\n    }\n}\n\nfunction updateClass(node: AbbreviationNode, value: string) {\n    for (const attr of node.attributes!) {\n        if (attr.name === 'class') {\n            attr.value = [value];\n            break;\n        }\n    }\n}\n\nfunction stringifyValue(value: Value[]): string {\n    let result = '';\n\n    for (const t of value) {\n        result += typeof t === 'string' ? t : t.name;\n    }\n\n    return result;\n}\n\nfunction uniqueClass<T>(item: T, ix: number, arr: T[]): boolean {\n    return !!item && arr.indexOf(item) === ix;\n}\n","import { AbbreviationNode, Abbreviation } from '@emmetio/abbreviation';\nimport createOutputStream, { OutputStream } from '../../output-stream';\nimport { Config } from '../../config';\n\nexport type WalkNext = (node: AbbreviationNode, index: number, items: AbbreviationNode[]) => void;\nexport type Visitor<S extends WalkState> = (node: AbbreviationNode, index: number, items: AbbreviationNode[], state: S, next: WalkNext) => void;\n\nexport interface WalkState {\n    /** Context node */\n    current: AbbreviationNode;\n\n    /** Immediate parent of currently iterated method */\n    parent?: AbbreviationNode;\n\n    /** List of all ancestors of context node */\n    ancestors: AbbreviationNode[];\n\n    /** Current output config */\n    config: Config;\n\n    /** Output stream */\n    out: OutputStream;\n\n    /** Current field index, used to output field marks for editor tabstops */\n    field: number;\n}\n\nexport default function walk<S extends WalkState>(abbr: Abbreviation, visitor: Visitor<S>, state: S) {\n    const callback = (ctx: AbbreviationNode, index: number, items: AbbreviationNode[]) => {\n        const { parent, current } = state;\n        state.parent = current;\n        state.current = ctx;\n        visitor(ctx, index, items, state, next);\n        state.current = current;\n        state.parent = parent;\n    };\n\n    const next: WalkNext = (node, index, items) => {\n        state.ancestors.push(state.current);\n        callback(node, index, items);\n        state.ancestors.pop();\n    };\n\n    abbr.children.forEach(callback);\n}\n\nexport function createWalkState(config: Config): WalkState {\n    return {\n        // @ts-ignore: Will set value in iterator\n        current: null,\n        parent: void 0,\n        ancestors: [],\n        config,\n        field: 1,\n        out: createOutputStream(config.options)\n    };\n}\n","import { AbbreviationNode, Field, Value, AbbreviationAttribute } from '@emmetio/abbreviation';\nimport { WalkState } from './walk';\nimport { pushString, pushField, isInline } from '../../output-stream';\nimport { Config } from '../../config';\n\nexport const caret = [{ type: 'Field', index: 0, name: '' } as Field];\n\n/**\n * Check if given node is a snippet: a node without name and attributes\n */\nexport function isSnippet(node?: AbbreviationNode): boolean {\n    return node ? !node.name && !node.attributes : false;\n}\n\n/**\n * Check if given node is inline-level element, e.g. element with explicitly\n * defined node name\n */\nexport function isInlineElement(node: AbbreviationNode | undefined, config: Config): boolean {\n    return node ? isInline(node, config) : false;\n}\n\n/**\n * Check if given value token is a field\n */\nexport function isField(token: Value): token is Field {\n    return typeof token === 'object' && token.type === 'Field';\n}\n\nexport function pushTokens(tokens: Value[], state: WalkState) {\n    const { out } = state;\n    let largestIndex = -1;\n\n    for (const t of tokens) {\n        if (typeof t === 'string') {\n            pushString(out, t);\n        } else {\n            pushField(out, state.field + t.index!, t.name);\n            if (t.index! > largestIndex) {\n                largestIndex = t.index!;\n            }\n        }\n    }\n\n    if (largestIndex !== -1) {\n        state.field += largestIndex + 1;\n    }\n}\n\n/**\n * Splits given value token by lines: returns array where each entry is a token list\n * for a single line\n */\nexport function splitByLines(tokens: Value[]): Value[][] {\n    const result: Value[][] = [];\n    let line: Value[] = [];\n\n    for (const t of tokens) {\n        if (typeof t === 'string') {\n            const lines = t.split(/\\r\\n?|\\n/g);\n            line.push(lines.shift() || '');\n            while (lines.length) {\n                result.push(line);\n                line = [lines.shift() || ''];\n            }\n        } else {\n            line.push(t);\n        }\n    }\n\n    line.length && result.push(line);\n    return result;\n}\n\n/**\n * Check if given attribute should be outputted\n */\nexport function shouldOutputAttribute(attr: AbbreviationAttribute): boolean {\n    // In case if attribute is implied, check if it has a defined value:\n    // either non-empty value or quoted empty value\n    return !attr.implied || attr.valueType !== 'raw' || (!!attr.value && attr.value.length > 0);\n}\n","export type TemplateToken = string | TemplatePlaceholder;\nexport interface TemplatePlaceholder {\n    before: string;\n    after: string;\n    name: string;\n}\n\ninterface TokenScanner {\n    text: string;\n    pos: number;\n}\n\nconst enum TemplateChars {\n    /** `[` character */\n    Start = 91,\n\n    /** `]` character */\n    End = 93,\n\n    /* `_` character */\n    Underscore = 95,\n\n    /* `-` character */\n    Dash = 45,\n}\n\n/**\n * Splits given string into template tokens.\n * Template is a string which contains placeholders which are uppercase names\n * between `[` and `]`, for example: `[PLACEHOLDER]`.\n * Unlike other templates, a placeholder may contain extra characters before and\n * after name: `[%PLACEHOLDER.]`. If data for `PLACEHOLDER` is defined, it will\n * be outputted with with these extra character, otherwise will be completely omitted.\n */\nexport default function template(text: string): TemplateToken[] {\n    const tokens: TemplateToken[] = [];\n    const scanner: TokenScanner = { pos: 0, text };\n    let placeholder: TemplatePlaceholder | undefined;\n    let offset = scanner.pos;\n    let pos = scanner.pos;\n\n    while (scanner.pos < scanner.text.length) {\n        pos = scanner.pos;\n        if (placeholder = consumePlaceholder(scanner)) {\n            if (offset !== scanner.pos) {\n                tokens.push(text.slice(offset, pos));\n            }\n            tokens.push(placeholder);\n            offset = scanner.pos;\n        } else {\n            scanner.pos++;\n        }\n    }\n\n    if (offset !== scanner.pos) {\n        tokens.push(text.slice(offset));\n    }\n\n    return tokens;\n}\n\n/**\n * Consumes placeholder like `[#ID]` from given scanner\n */\nfunction consumePlaceholder(scanner: TokenScanner): TemplatePlaceholder | undefined {\n    if (peek(scanner) === TemplateChars.Start) {\n        const start = ++scanner.pos;\n        let namePos = start;\n        let afterPos = start;\n        let stack = 1;\n\n        while (scanner.pos < scanner.text.length) {\n            const code = peek(scanner);\n            if (isTokenStart(code)) {\n                namePos = scanner.pos;\n                while (isToken(peek(scanner))) {\n                    scanner.pos++;\n                }\n                afterPos = scanner.pos;\n            } else {\n                if (code === TemplateChars.Start) {\n                    stack++;\n                } else if (code === TemplateChars.End) {\n                    if (--stack === 0) {\n                        return {\n                            before: scanner.text.slice(start, namePos),\n                            after: scanner.text.slice(afterPos, scanner.pos++),\n                            name: scanner.text.slice(namePos, afterPos)\n                        };\n                    }\n                }\n\n                scanner.pos++;\n            }\n        }\n    }\n}\n\nfunction peek(scanner: TokenScanner, pos = scanner.pos): number {\n    return scanner.text.charCodeAt(pos);\n}\n\nfunction isTokenStart(code: number): boolean {\n    return code >= 65 && code <= 90; // A-Z\n}\n\nfunction isToken(code: number): boolean {\n    return isTokenStart(code)\n        || (code > 47 && code < 58) /* 0-9 */\n        || code === TemplateChars.Underscore\n        || code === TemplateChars.Dash;\n}\n","import { AbbreviationNode, Value } from '@emmetio/abbreviation';\nimport { pushString } from '../../output-stream';\nimport { WalkState } from './walk';\nimport { pushTokens } from './utils';\nimport template, { TemplateToken } from './template';\nimport { Config } from '../../config';\nimport { HTMLWalkState } from './html';\n\nexport interface CommentWalkState {\n    enabled: boolean;\n    trigger: string[];\n    before?: TemplateToken[];\n    after?: TemplateToken[];\n}\n\nexport function createCommentState(config: Config): CommentWalkState {\n    const { options } = config;\n    return {\n        enabled: options['comment.enabled'],\n        trigger: options['comment.trigger'],\n        before: options['comment.before'] ? template(options['comment.before']) : void 0,\n        after: options['comment.after'] ? template(options['comment.after']) : void 0\n    };\n}\n\n/**\n * Adds comment prefix for given node, if required\n */\nexport function commentNodeBefore(node: AbbreviationNode, state: HTMLWalkState) {\n    if (shouldComment(node, state) && state.comment.before) {\n        output(node, state.comment.before, state);\n    }\n}\n\n/**\n * Adds comment suffix for given node, if required\n */\nexport function commentNodeAfter(node: AbbreviationNode, state: HTMLWalkState) {\n    if (shouldComment(node, state) && state.comment.after) {\n        output(node, state.comment.after, state);\n    }\n}\n\n/**\n * Check if given node should be commented\n */\nfunction shouldComment(node: AbbreviationNode, state: HTMLWalkState): boolean {\n    const { comment } = state;\n\n    if (!comment.enabled || !comment.trigger || !node.name || !node.attributes) {\n        return false;\n    }\n\n    for (const attr of node.attributes) {\n        if (attr.name && comment.trigger.includes(attr.name)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Pushes given template tokens into output stream\n */\nfunction output(node: AbbreviationNode, tokens: TemplateToken[], state: WalkState) {\n    const attrs: { [name: string]: Value[] } = {};\n    const { out } = state;\n\n    // Collect attributes payload\n    for (const attr of node.attributes!) {\n        if (attr.name && attr.value) {\n            attrs[attr.name.toUpperCase()] = attr.value;\n        }\n    }\n\n    // Output parsed tokens\n    for (const token of tokens) {\n        if (typeof token === 'string') {\n            pushString(out, token);\n        } else if (attrs[token.name]) {\n            pushString(out, token.before);\n            pushTokens(attrs[token.name], state);\n            pushString(out, token.after);\n        }\n    }\n}\n","import { Abbreviation, AbbreviationNode, AbbreviationAttribute, Value } from '@emmetio/abbreviation';\nimport { pushNewline, pushString, tagName, selfClose, attrName, isBooleanAttribute, attrQuote, isInline } from '../../output-stream';\nimport walk, { WalkState, createWalkState } from './walk';\nimport { caret, isInlineElement, isSnippet, isField, pushTokens, shouldOutputAttribute } from './utils';\nimport { commentNodeBefore, commentNodeAfter, CommentWalkState, createCommentState } from './comment';\nimport { Config } from '../../config';\n\nconst htmlTagRegex = /^<([\\w\\-:]+)[\\s>]/;\ntype WalkNext = (node: AbbreviationNode, index: number, items: AbbreviationNode[]) => void;\n\nexport interface HTMLWalkState extends WalkState {\n    comment: CommentWalkState;\n}\n\nexport default function html(abbr: Abbreviation, config: Config): string {\n    const state = createWalkState(config) as HTMLWalkState;\n    state.comment = createCommentState(config);\n    walk(abbr, element, state);\n    return state.out.value;\n}\n\n/**\n * Outputs `node` content to output stream of `state`\n * @param node Context node\n * @param index Index of `node` in `items`\n * @param items List of `node`’s siblings\n * @param state Current walk state\n */\nfunction element(node: AbbreviationNode, index: number, items: AbbreviationNode[], state: HTMLWalkState, next: WalkNext) {\n    const { out, config } = state;\n    const format = shouldFormat(node, index, items, state);\n\n    // Pick offset level for current node\n    const level = getIndent(state);\n    out.level += level;\n\n    format && pushNewline(out, true);\n\n    if (node.name) {\n        const name = tagName(node.name, config);\n        commentNodeBefore(node, state);\n        pushString(out, `<${name}`);\n\n        if (node.attributes) {\n            for (const attr of node.attributes) {\n                if (shouldOutputAttribute(attr)) {\n                    pushAttribute(attr, state);\n                }\n            }\n        }\n\n        if (node.selfClosing && !node.children.length && !node.value) {\n            pushString(out, `${selfClose(config)}>`);\n        } else {\n            pushString(out, '>');\n\n            if (!pushSnippet(node, state, next)) {\n                if (node.value) {\n                    const innerFormat = node.value.some(hasNewline) || startsWithBlockTag(node.value, config);\n                    innerFormat && pushNewline(state.out, ++out.level);\n                    pushTokens(node.value, state);\n                    innerFormat && pushNewline(state.out, --out.level);\n                }\n\n                node.children.forEach(next);\n\n                if (!node.value && !node.children.length) {\n                    const innerFormat = config.options['output.formatLeafNode']\n                        || config.options['output.formatForce'].includes(node.name);\n                    innerFormat && pushNewline(state.out, ++out.level);\n                    pushTokens(caret, state);\n                    innerFormat && pushNewline(state.out, --out.level);\n                }\n            }\n\n            pushString(out, `</${name}>`);\n            commentNodeAfter(node, state);\n        }\n    } else if (!pushSnippet(node, state, next) && node.value) {\n        // A text-only node (snippet)\n        pushTokens(node.value, state);\n        node.children.forEach(next);\n    }\n\n    if (format && index === items.length - 1 && state.parent) {\n        const offset = isSnippet(state.parent) ? 0 : 1;\n        pushNewline(out, out.level - offset);\n    }\n\n    out.level -= level;\n}\n\n/**\n * Outputs given attribute’s content into output stream\n */\nfunction pushAttribute(attr: AbbreviationAttribute, state: WalkState) {\n    const { out, config } = state;\n\n    if (attr.name) {\n        const name = attrName(attr.name, config);\n        const lQuote = attrQuote(attr, config, true);\n        const rQuote = attrQuote(attr, config);\n        let value = attr.value;\n\n        if (isBooleanAttribute(attr, config) && !value) {\n            // If attribute value is omitted and it’s a boolean value, check for\n            // `compactBoolean` option: if it’s disabled, set value to attribute name\n            // (XML style)\n            if (!config.options['output.compactBoolean']) {\n                value = [name];\n            }\n        } else if (!value) {\n            value = caret;\n        }\n\n        pushString(out, ' ' + name);\n        if (value) {\n            pushString(out, '=' + lQuote);\n            pushTokens(value, state);\n            pushString(out, rQuote);\n        } else if (config.options['output.selfClosingStyle'] !== 'html') {\n            pushString(out, '=' + lQuote + rQuote);\n        }\n    }\n}\n\nexport function pushSnippet(node: AbbreviationNode, state: WalkState, next: WalkNext): boolean {\n    if (node.value && node.children.length) {\n        // We have a value and child nodes. In case if value contains fields,\n        // we should output children as a content of first field\n        const fieldIx = node.value.findIndex(isField);\n        if (fieldIx !== -1) {\n            pushTokens(node.value.slice(0, fieldIx), state);\n            const line = state.out.line;\n            let pos = fieldIx + 1;\n            node.children.forEach(next);\n\n            // If there was a line change, trim leading whitespace for better result\n            if (state.out.line !== line && typeof node.value[pos] === 'string') {\n                pushString(state.out, (node.value[pos++] as string).trimLeft());\n            }\n\n            pushTokens(node.value.slice(pos), state);\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Check if given node should be formatted in its parent context\n */\nfunction shouldFormat(node: AbbreviationNode, index: number, items: AbbreviationNode[], state: WalkState): boolean {\n    const { config, parent } = state;\n\n    if (!config.options['output.format']) {\n        return false;\n    }\n\n    if (index === 0 && !parent) {\n        // Do not format very first node\n        return false;\n    }\n\n    // Do not format single child of snippet\n    if (parent && isSnippet(parent) && items.length === 1) {\n        return false;\n    }\n\n    /**\n     * Adjacent text-only/snippet nodes\n     */\n    if (isSnippet(node)) {\n        // Adjacent text-only/snippet nodes\n        const format = isSnippet(items[index - 1]) || isSnippet(items[index + 1])\n\n            // Has newlines: looks like wrapping code fragment\n            || node.value!.some(hasNewline)\n\n            // Format as wrapper: contains children which will be outputted as field content\n            || (node.value!.some(isField) && node.children.length);\n\n        if (format) {\n            return true;\n        }\n    }\n\n    if (isInline(node, config)) {\n        // Check if inline node is the next sibling of block-level node\n        if (index === 0) {\n            // First node in parent: format if it’s followed by a block-level element\n            for (let i = 0; i < items.length; i++) {\n                if (!isInline(items[i], config)) {\n                    return true;\n                }\n            }\n        } else if (!isInline(items[index - 1], config)) {\n            // Node is right after block-level element\n            return true;\n        }\n\n        if (config.options['output.inlineBreak']) {\n            // check for adjacent inline elements before and after current element\n            let adjacentInline = 1;\n            let before = index;\n            let after = index;\n\n            while (isInlineElement(items[--before], config)) {\n                adjacentInline++;\n            }\n\n            while (isInlineElement(items[++after], config)) {\n                adjacentInline++;\n            }\n\n            if (adjacentInline >= config.options['output.inlineBreak']) {\n                return true;\n            }\n        }\n\n        // Edge case: inline node contains node that should receive formatting\n        for (let i = 0, il = node.children.length; i < il; i++) {\n            if (shouldFormat(node.children[i], i, node.children, state)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Returns indentation offset for given node\n */\nfunction getIndent(state: WalkState): number {\n    const { config, parent } = state;\n\n    if (!parent || isSnippet(parent) || (parent.name && config.options['output.formatSkip'].includes(parent.name))) {\n        return 0;\n    }\n\n    return 1;\n}\n\n/**\n * Check if given node value contains newlines\n */\nfunction hasNewline(value: Value): boolean {\n    return typeof value === 'string' && /\\r|\\n/.test(value);\n}\n\n/**\n * Check if given node value starts with block-level tag\n */\nfunction startsWithBlockTag(value: Value[], config: Config): boolean {\n    if (value.length && typeof value[0] === 'string') {\n        const matches = htmlTagRegex.exec(value[0]);\n        if (matches?.length && !config.options['inlineElements'].includes(matches[1].toLowerCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { AbbreviationNode, AbbreviationAttribute, Value, Abbreviation } from '@emmetio/abbreviation';\nimport { pushString, pushNewline, push, attrName, isBooleanAttribute, attrQuote } from '../../output-stream';\nimport { pushTokens, caret, splitByLines, isSnippet, shouldOutputAttribute } from './utils';\nimport walk, { WalkState, createWalkState, WalkNext } from './walk';\nimport { Config } from '../../config';\n\n/**\n * @description Utility methods for working with indent-based markup languages\n * like HAML, Slim, Pug etc.\n */\n\ninterface AttributesCollection {\n    /** Primary element attributes: `id` and `class` */\n    primary: AbbreviationAttribute[];\n\n    /** Secondary element attributes: everything except `id` and `class` */\n    secondary: AbbreviationAttribute[];\n}\n\nexport interface IndentWalkState extends WalkState {\n    options: FormatOptions;\n}\n\nexport interface FormatOptions {\n    /** String to output before tag name */\n    beforeName?: string;\n\n    /** String to output after tag name */\n    afterName?: string;\n\n    /** String to output before secondary attribute set */\n    beforeAttribute?: string;\n\n    /** String to output after secondary attribute set */\n    afterAttribute?: string;\n\n    /** String to put between secondary attributes */\n    glueAttribute?: string;\n\n    /** Value for boolean attributes */\n    booleanValue?: string;\n\n    /** String to put before content line (if value is multiline) */\n    beforeTextLine?: string;\n\n    /** String to put after content line (if value is multiline) */\n    afterTextLine?: string;\n\n    /** String to put after self-closing elements like `br`. Mostly a `/` character */\n    selfClose?: string;\n}\n\nexport default function indentFormat(abbr: Abbreviation, config: Config, options?: Partial<FormatOptions>): string {\n    const state = createWalkState(config) as IndentWalkState;\n    state.options = options || {};\n    walk(abbr, element, state);\n    return state.out.value;\n}\n\n/**\n * Outputs `node` content to output stream of `state`\n * @param node Context node\n * @param index Index of `node` in `items`\n * @param items List of `node`’s siblings\n * @param state Current walk state\n */\nexport function element(node: AbbreviationNode, index: number, items: AbbreviationNode[], state: IndentWalkState, next: WalkNext) {\n    const { out, options } = state;\n    const { primary, secondary } = collectAttributes(node);\n\n    // Pick offset level for current node\n    const level = state.parent ? 1 : 0;\n    out.level += level;\n\n    // Do not indent top-level elements\n    if (shouldFormat(node, index, items, state)) {\n        pushNewline(out, true);\n    }\n\n    if (node.name && (node.name !== 'div' || !primary.length)) {\n        pushString(out, (options.beforeName || '') + node.name + (options.afterName || ''));\n    }\n\n    pushPrimaryAttributes(primary, state);\n    pushSecondaryAttributes(secondary.filter(shouldOutputAttribute), state);\n\n    if (node.selfClosing && !node.value && !node.children.length) {\n        if (state.options.selfClose) {\n            pushString(out, state.options.selfClose);\n        }\n    } else {\n        pushValue(node, state);\n        node.children.forEach(next);\n    }\n\n    out.level -= level;\n}\n\n/**\n * From given node, collects all attributes as `primary` (id, class) and\n * `secondary` (all the rest) lists. In most indent-based syntaxes, primary attribute\n * has special syntax\n */\nexport function collectAttributes(node: AbbreviationNode): AttributesCollection {\n    const primary: AbbreviationAttribute[] = [];\n    const secondary: AbbreviationAttribute[] = [];\n\n    if (node.attributes) {\n        for (const attr of node.attributes) {\n            if (isPrimaryAttribute(attr)) {\n                primary.push(attr);\n            } else {\n                secondary.push(attr);\n            }\n        }\n    }\n\n    return { primary, secondary };\n}\n\n/**\n * Outputs given attributes as primary into output stream\n */\nexport function pushPrimaryAttributes(attrs: AbbreviationAttribute[], state: WalkState) {\n    for (const attr of attrs) {\n        if (attr.value) {\n            if (attr.name === 'class') {\n                pushString(state.out, '.');\n                // All whitespace characters must be replaced with dots in class names\n                const tokens = attr.value.map(t => typeof t === 'string' ? t.replace(/\\s+/g, '.') : t);\n                pushTokens(tokens, state);\n            } else {\n                // ID attribute\n                pushString(state.out, '#');\n                pushTokens(attr.value, state);\n            }\n        }\n    }\n}\n\n/**\n * Outputs given attributes as secondary into output stream\n */\nexport function pushSecondaryAttributes(attrs: AbbreviationAttribute[], state: IndentWalkState) {\n    if (attrs.length) {\n        const { out, config, options } = state;\n\n        options.beforeAttribute && pushString(out, options.beforeAttribute);\n\n        for (let i = 0; i < attrs.length; i++) {\n            const attr = attrs[i];\n            pushString(out, attrName(attr.name || '', config));\n            if (isBooleanAttribute(attr, config) && !attr.value) {\n                if (!config.options['output.compactBoolean'] && options.booleanValue) {\n                    pushString(out, '=' + options.booleanValue);\n                }\n            } else {\n                pushString(out, '=' + attrQuote(attr, config, true));\n                pushTokens(attr.value || caret, state);\n                pushString(out, attrQuote(attr, config));\n            }\n\n            if (i !== attrs.length - 1 && options.glueAttribute) {\n                pushString(out, options.glueAttribute);\n            }\n        }\n\n        options.afterAttribute && pushString(out, options.afterAttribute);\n    }\n}\n\n/**\n * Outputs given node value into state output stream\n */\nexport function pushValue(node: AbbreviationNode, state: IndentWalkState) {\n    // We should either output value or add caret but for leaf nodes only (no children)\n    if (!node.value && node.children.length) {\n        return;\n    }\n\n    const value = node.value || caret;\n    const lines = splitByLines(value);\n    const { out, options } = state;\n\n    if (lines.length === 1) {\n        if (node.name || node.attributes) {\n            push(out, ' ');\n        }\n        pushTokens(value, state);\n    } else {\n        // We should format multi-line value with terminating `|` character\n        // and same line length\n        const lineLengths: number[] = [];\n        let maxLength = 0;\n\n        // Calculate lengths of all lines and max line length\n        for (const line of lines) {\n            const len = valueLength(line);\n            lineLengths.push(len);\n            if (len > maxLength) {\n                maxLength = len;\n            }\n        }\n\n        // Output each line, padded to max length\n        out.level++;\n        for (let i = 0; i < lines.length; i++) {\n            pushNewline(out, true);\n            options.beforeTextLine && push(out, options.beforeTextLine);\n            pushTokens(lines[i], state);\n            if (options.afterTextLine) {\n                push(out, ' '.repeat(maxLength - lineLengths[i]));\n                push(out, options.afterTextLine);\n            }\n        }\n        out.level--;\n    }\n}\n\nfunction isPrimaryAttribute(attr: AbbreviationAttribute): boolean {\n    return attr.name === 'class' || attr.name === 'id';\n}\n\n/**\n * Calculates string length from given tokens\n */\nfunction valueLength(tokens: Value[]): number {\n    let len = 0;\n\n    for (const token of tokens) {\n        len += typeof token === 'string' ? token.length : token.name.length;\n    }\n\n    return len;\n}\n\nfunction shouldFormat(node: AbbreviationNode, index: number, items: AbbreviationNode[], state: WalkState): boolean {\n    // Do not format first top-level element or snippets\n    if (!state.parent && index === 0) {\n        return false;\n    }\n    return !isSnippet(node);\n}\n","import { Abbreviation } from '@emmetio/abbreviation';\nimport indentFormat from './indent-format';\nimport { Config } from '../../config';\n\nexport default function haml(abbr: Abbreviation, config: Config): string {\n    return indentFormat(abbr, config, {\n        beforeName: '%',\n        beforeAttribute: '(',\n        afterAttribute: ')',\n        glueAttribute: ' ',\n        afterTextLine: ' |',\n        booleanValue: 'true',\n        selfClose: '/'\n    });\n}\n","import { Abbreviation } from '@emmetio/abbreviation';\nimport indentFormat from './indent-format';\nimport { Config } from '../../config';\n\nexport default function slim(abbr: Abbreviation, config: Config): string {\n    return indentFormat(abbr, config, {\n        beforeAttribute: ' ',\n        glueAttribute: ' ',\n        beforeTextLine: '| ',\n        selfClose: '/'\n    });\n}\n","import { Abbreviation } from '@emmetio/abbreviation';\nimport indentFormat from './indent-format';\nimport { Config } from '../../config';\n\nexport default function pug(abbr: Abbreviation, config: Config): string {\n    return indentFormat(abbr, config, {\n        beforeAttribute: '(',\n        afterAttribute: ')',\n        glueAttribute: ', ',\n        beforeTextLine: '| ',\n        selfClose: config.options['output.selfClosingStyle'] === 'xml' ? '/' : ''\n    });\n}\n","import abbreviation, { Abbreviation, AbbreviationNode, ParserOptions } from '@emmetio/abbreviation';\nimport attributes from './attributes';\nimport snippets from './snippets';\nimport implicitTag from './implicit-tag';\nimport lorem from './lorem';\nimport jsx from './addon/jsx';\nimport xsl from './addon/xsl';\nimport bem from './addon/bem';\nimport html from './format/html';\nimport haml from './format/haml';\nimport slim from './format/slim';\nimport pug from './format/pug';\nimport { Config } from '../config';\nimport { walk, Container } from './utils';\n\ntype Formatter = (abbr: Abbreviation, config: Config) => string;\n\nconst formatters: { [syntax: string]: Formatter } = { html, haml, slim, pug };\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n */\nexport default function parse(abbr: string | Abbreviation, config: Config): Abbreviation {\n    let oldTextValue: string | string[] | undefined;\n    if (typeof abbr === 'string') {\n        let parseOpt: ParserOptions = config;\n        if (config.options['jsx.enabled']) {\n            parseOpt = {\n                ...parseOpt,\n                jsx: true\n            };\n        }\n        if (config.options['markup.href']) {\n            parseOpt = {\n                ...parseOpt,\n                href: true\n            };\n        }\n\n        abbr = abbreviation(abbr, parseOpt);\n\n        // remove text field before snippets(abbr, config) call\n        // as abbreviation(abbr, parseOpt) already handled it\n        oldTextValue = config.text;\n        config.text = undefined;\n    }\n\n    // Run abbreviation resolve in two passes:\n    // 1. Map each node to snippets, which are abbreviations as well. A single snippet\n    // may produce multiple nodes\n    // 2. Transform every resolved node\n    abbr = snippets(abbr, config);\n    walk(abbr, transform, config);\n    config.text = oldTextValue ?? config.text;\n    return abbr;\n}\n\n/**\n * Converts given abbreviation to string according to provided `config`\n */\nexport function stringify(abbr: Abbreviation, config: Config): string {\n    const formatter: Formatter = formatters[config.syntax] || html;\n    return formatter(abbr, config);\n}\n\n/**\n * Modifies given node and prepares it for output\n */\nfunction transform(node: AbbreviationNode, ancestors: Container[], config: Config) {\n    implicitTag(node, ancestors, config);\n    attributes(node, config);\n    lorem(node, ancestors, config);\n\n    if (config.syntax === 'xsl') {\n        xsl(node);\n    }\n\n    if (config.options['jsx.enabled']) {\n        jsx(node);\n    }\n\n    if (config.options['bem.enabled']) {\n        bem(node, ancestors, config);\n    }\n}\n","import parse, { CSSValue, ParseOptions, FunctionCall, Literal } from '@emmetio/css-abbreviation';\n\nexport type CSSSnippet = CSSSnippetRaw | CSSSnippetProperty;\n\ninterface KeywordMap {\n    [name: string]: FunctionCall | Literal;\n}\n\nexport const enum CSSSnippetType {\n    Raw = 'Raw',\n    Property = 'Property'\n}\n\ninterface CSSSnippetBase {\n    type: CSSSnippetType;\n    key: string;\n}\n\nexport interface CSSSnippetRaw extends CSSSnippetBase {\n    type: CSSSnippetType.Raw;\n    value: string;\n}\n\nexport interface CSSSnippetProperty extends CSSSnippetBase {\n    type: CSSSnippetType.Property;\n    property: string;\n    value: CSSValue[][];\n    keywords: KeywordMap;\n    dependencies: CSSSnippetProperty[];\n}\n\nconst reProperty = /^([a-z-]+)(?:\\s*:\\s*([^\\n\\r;]+?);*)?$/;\nconst opt: ParseOptions = { value: true };\n\n/**\n * Creates structure for holding resolved CSS snippet\n */\nexport default function createSnippet(key: string, value: string): CSSSnippet {\n    // A snippet could be a raw text snippet (e.g. arbitrary text string) or a\n    // CSS property with possible values separated by `|`.\n    // In latter case, we have to parse snippet as CSS abbreviation\n    const m = value.match(reProperty);\n    if (m) {\n        const keywords: KeywordMap = {};\n        const parsed: CSSValue[][] = m[2] ? m[2].split('|').map(parseValue) : [];\n\n        for (const item of parsed) {\n            for (const cssVal of item) {\n                collectKeywords(cssVal, keywords);\n            }\n        }\n\n        return {\n            type: CSSSnippetType.Property,\n            key,\n            property: m[1],\n            value: parsed,\n            keywords,\n            dependencies: []\n        };\n    }\n\n    return { type: CSSSnippetType.Raw, key, value };\n}\n\n/**\n * Nests more specific CSS properties into shorthand ones, e.g.\n * `background-position-x` -> `background-position` -> `background`\n */\nexport function nest(snippets: CSSSnippet[]): CSSSnippet[] {\n    snippets = snippets.slice().sort(snippetsSort);\n    const stack: CSSSnippetProperty[] = [];\n    let prev: CSSSnippet;\n\n    // For sorted list of CSS properties, create dependency graph where each\n    // shorthand property contains its more specific one, e.g.\n    // background -> background-position -> background-position-x\n    for (const cur of snippets.filter(isProperty)) {\n        // Check if current property belongs to one from parent stack.\n        // Since `snippets` array is sorted, items are perfectly aligned\n        // from shorthands to more specific variants\n        while (stack.length) {\n            prev = stack[stack.length - 1];\n\n            if (cur.property.startsWith(prev.property!)\n                && cur.property.charCodeAt(prev.property!.length) === 45 /* - */) {\n                prev.dependencies.push(cur);\n                stack.push(cur);\n                break;\n            }\n\n            stack.pop();\n        }\n\n        if (!stack.length) {\n            stack.push(cur);\n        }\n\n    }\n\n    return snippets;\n}\n\n/**\n * A sorting function for array of snippets\n */\nfunction snippetsSort(a: CSSSnippet, b: CSSSnippet): number {\n    if (a.key === b.key) {\n        return 0;\n    }\n\n    return a.key < b.key ? -1 : 1;\n}\n\nfunction parseValue(value: string): CSSValue[] {\n    return parse(value.trim(), opt)[0].value;\n}\n\nfunction isProperty(snippet: CSSSnippet): snippet is CSSSnippetProperty {\n    return snippet.type === CSSSnippetType.Property;\n}\n\nfunction collectKeywords(cssVal: CSSValue, dest: KeywordMap) {\n    for (const v of cssVal.value) {\n        if (v.type === 'Literal') {\n            dest[v.value] = v;\n        } else if (v.type === 'FunctionCall') {\n            dest[v.name] = v;\n        } else if (v.type === 'Field') {\n            // Create literal from field, if available\n            const value = v.name.trim();\n            if (value) {\n                dest[value] = { type: 'Literal', value };\n            }\n        }\n    }\n}\n","/**\n * Calculates how close `str1` matches `str2` using fuzzy match.\n * How matching works:\n * – first characters of both `str1` and `str2` *must* match\n * – `str1` length larger than `str2` length is allowed only when `unmatched` is true\n * – ideal match is when `str1` equals to `str2` (score: 1)\n * – next best match is `str2` starts with `str1` (score: 1 × percent of matched characters)\n * – other scores depend on how close characters of `str1` to the beginning of `str2`\n * @param partialMatch Allow length `str1` to be greater than `str2` length\n */\nexport default function scoreMatch(str1: string, str2: string, partialMatch = false) {\n    str1 = str1.toLowerCase();\n    str2 = str2.toLowerCase();\n\n    if (str1 === str2) {\n        return 1;\n    }\n\n    // Both strings MUST start with the same character\n    if (!str1 || !str2 || str1.charCodeAt(0) !== str2.charCodeAt(0)) {\n        return 0;\n    }\n\n    const str1Len = str1.length;\n    const str2Len = str2.length;\n\n    if (!partialMatch && str1Len > str2Len) {\n        return 0;\n    }\n\n    // Characters from `str1` which are closer to the beginning of a `str2` should\n    // have higher score.\n    // For example, if `str2` is `abcde`, it’s max score is:\n    // 5 + 4 + 3 + 2 + 1 = 15 (sum of character positions in reverse order)\n    // Matching `abd` against `abcde` should produce:\n    // 5 + 4 + 2 = 11\n    // Acronym bonus for match right after `-`. Matching `abd` against `abc-de`\n    // should produce:\n    // 6 + 5 + 4 (use `d` position in `abd`, not in abc-de`)\n\n    const minLength = Math.min(str1Len, str2Len);\n    const maxLength = Math.max(str1Len, str2Len);\n    let i = 1;\n    let j = 1;\n    let score = maxLength;\n    let ch1 = 0;\n    let ch2 = 0;\n    let found = false;\n    let acronym = false;\n\n    while (i < str1Len) {\n        ch1 = str1.charCodeAt(i);\n        found = false;\n        acronym = false;\n\n        while (j < str2Len) {\n            ch2 = str2.charCodeAt(j);\n\n            if (ch1 === ch2) {\n                found = true;\n                score += maxLength - (acronym ? i : j);\n                break;\n            }\n\n            // add acronym bonus for exactly next match after unmatched `-`\n            acronym = ch2 === 45 /* - */;\n            j++;\n        }\n\n        if (!found) {\n            if (!partialMatch) {\n                return 0;\n            }\n            break;\n        }\n\n        i++;\n    }\n\n    const matchRatio = i / maxLength;\n    const delta = maxLength - minLength;\n    const maxScore = sum(maxLength) - sum(delta);\n    return (score * matchRatio) / maxScore;\n}\n\n/**\n * Calculates sum of first `n` numbers, e.g. 1+2+3+...n\n */\nfunction sum(n: number): number {\n    return n * (n + 1) / 2;\n}\n","import { ColorValue } from '@emmetio/css-abbreviation';\n\nexport default function color(token: ColorValue, shortHex?: boolean): string {\n    if (!token.r && !token.g && !token.b && !token.a) {\n        return 'transparent';\n    } else if (token.a === 1) {\n        return asHex(token, shortHex);\n    }\n\n    return asRGB(token);\n}\n\n/**\n * Output given color as hex value\n * @param short Produce short value (e.g. #fff instead of #ffffff), if possible\n */\nexport function asHex(token: ColorValue, short?: boolean): string {\n    const fn = (short && isShortHex(token.r) && isShortHex(token.g) && isShortHex(token.b))\n        ? toShortHex : toHex;\n\n    return '#' + fn(token.r) + fn(token.g) + fn(token.b);\n}\n\n/**\n * Output current color as `rgba?(...)` CSS color\n */\nfunction asRGB(token: ColorValue): string {\n    const values: Array<string | number> = [token.r, token.g, token.b];\n    if (token.a !== 1) {\n        values.push(frac(token.a, 8));\n    }\n\n    return `${values.length === 3 ? 'rgb' : 'rgba'}(${values.join(', ')})`;\n}\n\nexport function frac(num: number, digits = 4): string {\n    return num.toFixed(digits).replace(/\\.?0+$/, '');\n}\n\nfunction isShortHex(hex: number): boolean {\n    return !(hex % 17);\n}\n\nfunction toShortHex(num: number): string {\n    return (num >> 4).toString(16);\n}\n\nfunction toHex(num: number): string {\n    return pad(num.toString(16), 2);\n}\n\nfunction pad(value: string, len: number): string {\n    while (value.length < len) {\n        value = '0' + value;\n    }\n    return value;\n}\n","import { CSSAbbreviation, CSSProperty, Value, CSSValue, NumberValue } from '@emmetio/css-abbreviation';\nimport createOutputStream, { OutputStream, push, pushString, pushField, pushNewline } from '../output-stream';\nimport { Config } from '../config';\nimport color, { frac } from './color';\nimport { CSSAbbreviationScope } from './';\n\nexport default function css(abbr: CSSAbbreviation, config: Config): string {\n    const out = createOutputStream(config.options);\n    const format = config.options['output.format'];\n\n    if (config.context?.name === CSSAbbreviationScope.Section) {\n        // For section context, filter out unmatched snippets\n        abbr = abbr.filter(node => node.snippet);\n    }\n\n    for (let i = 0; i < abbr.length; i++) {\n        if (format && i !== 0) {\n            pushNewline(out, true);\n        }\n        property(abbr[i], out, config);\n    }\n\n    return out.value;\n}\n\n/**\n * Outputs given abbreviation node into output stream\n */\nfunction property(node: CSSProperty, out: OutputStream, config: Config) {\n    const isJSON = config.options['stylesheet.json'];\n    if (node.name) {\n        // It’s a CSS property\n        const name = isJSON ? toCamelCase(node.name) : node.name;\n        pushString(out, name + config.options['stylesheet.between']);\n\n        if (node.value.length) {\n            propertyValue(node, out, config);\n        } else {\n            pushField(out, 0, '');\n        }\n\n        if (isJSON) {\n            // For CSS-in-JS, always finalize property with comma\n            // NB: seems like `important` is not available in CSS-in-JS syntaxes\n            push(out, ',');\n        } else {\n            outputImportant(node, out, true);\n            push(out, config.options['stylesheet.after']);\n        }\n    } else {\n        // It’s a regular snippet, output plain tokens without any additional formatting\n        for (const cssVal of node.value) {\n            for (const v of cssVal.value) {\n                outputToken(v, out, config);\n            }\n        }\n        outputImportant(node, out, node.value.length > 0);\n    }\n}\n\nfunction propertyValue(node: CSSProperty, out: OutputStream, config: Config) {\n    const isJSON = config.options['stylesheet.json'];\n    const num = isJSON ? getSingleNumeric(node) : null;\n\n    if (num && (!num.unit || num.unit === 'px')) {\n        // For CSS-in-JS, if property contains single numeric value, output it\n        // as JS number\n        push(out, String(num.value));\n    } else {\n        const quote = getQuote(config);\n        isJSON && push(out, quote);\n        for (let i = 0; i < node.value.length; i++) {\n            if (i !== 0) {\n                push(out, ', ');\n            }\n            outputValue(node.value[i], out, config);\n        }\n        isJSON && push(out, quote);\n    }\n}\n\nfunction outputImportant(node: CSSProperty, out: OutputStream, separator?: boolean) {\n    if (node.important) {\n        if (separator) {\n            push(out, ' ');\n        }\n        push(out, '!important');\n    }\n}\n\nfunction outputValue(value: CSSValue, out: OutputStream, config: Config) {\n    for (let i = 0, prevEnd = -1; i < value.value.length; i++) {\n        const token = value.value[i];\n        // Handle edge case: a field is written close to previous token like this: `foo${bar}`.\n        // We should not add delimiter here\n        if (i !== 0 && (token.type !== 'Field' || token.start !== prevEnd)) {\n            push(out, ' ');\n        }\n\n        outputToken(token, out, config);\n        prevEnd = token['end'];\n    }\n}\n\nfunction outputToken(token: Value, out: OutputStream, config: Config) {\n    if (token.type === 'ColorValue') {\n        push(out, color(token, config.options['stylesheet.shortHex']));\n    } else if (token.type === 'Literal') {\n        pushString(out, token.value);\n    } else if (token.type === 'NumberValue') {\n        pushString(out, frac(token.value, 4) + token.unit);\n    } else if (token.type === 'StringValue') {\n        const quote = token.quote === 'double' ? '\"' : '\\'';\n        pushString(out, quote + token.value + quote);\n    } else if (token.type === 'Field') {\n        pushField(out, token.index!, token.name);\n    } else if (token.type === 'FunctionCall') {\n        push(out, token.name + '(');\n        for (let i = 0; i < token.arguments.length; i++) {\n            if (i) {\n                push(out, ', ');\n            }\n            outputValue(token.arguments[i], out, config);\n        }\n        push(out, ')');\n    }\n}\n\n/**\n * If value of given property is a single numeric value, returns this token\n */\nfunction getSingleNumeric(node: CSSProperty): NumberValue | void {\n    if (node.value.length === 1) {\n        const cssVal = node.value[0]!;\n        if (cssVal.value.length === 1 && cssVal.value[0]!.type === 'NumberValue') {\n            return cssVal.value[0] as NumberValue;\n        }\n    }\n}\n\n/**\n * Converts kebab-case string to camelCase\n */\nfunction toCamelCase(str: string): string {\n    return str.replace(/\\-(\\w)/g, (_, letter: string) => letter.toUpperCase());\n}\n\nfunction getQuote(config: Config): string {\n    return config.options['stylesheet.jsonDoubleQuotes'] ? '\"' : '\\'';\n}\n","import abbreviation, { CSSAbbreviation, CSSProperty, CSSValue, Literal, Value, Field, FunctionCall } from '@emmetio/css-abbreviation';\nimport { Config, SnippetsMap } from '../config';\nimport createSnippet, { CSSSnippet, nest, CSSSnippetType, CSSSnippetRaw, CSSSnippetProperty } from './snippets';\nimport calculateScore from './score';\nimport color from './color';\n\ntype MatchInput = CSSSnippet | string;\n\nexport const enum CSSAbbreviationScope {\n    /** Include all possible snippets in match */\n    Global = '@@global',\n    /** Include raw snippets only (e.g. no properties) in abbreviation match */\n    Section = '@@section',\n    /** Include properties only in abbreviation match */\n    Property = '@@property',\n    /** Resolve abbreviation in context of CSS property value */\n    Value = '@@value',\n}\n\n\nconst gradientName = 'lg';\n\n/**\n * Parses given Emmet abbreviation into a final abbreviation tree with all\n * required transformations applied\n */\nexport default function parse(abbr: string | CSSAbbreviation, config: Config): CSSAbbreviation {\n    const snippets = config.cache?.stylesheetSnippets || convertSnippets(config.snippets);\n\n    if (config.cache) {\n        config.cache.stylesheetSnippets = snippets;\n    }\n\n    if (typeof abbr === 'string') {\n        abbr = abbreviation(abbr, { value: isValueScope(config) });\n    }\n\n    const filteredSnippets = getSnippetsForScope(snippets, config);\n\n    for (const node of abbr) {\n        resolveNode(node, filteredSnippets, config);\n    }\n\n    return abbr;\n}\n\nexport { default as stringify } from './format';\n\n/**\n * Converts given raw snippets into internal snippets representation\n */\nexport function convertSnippets(snippets: SnippetsMap): CSSSnippet[] {\n    const result: CSSSnippet[] = [];\n    for (const key of Object.keys(snippets)) {\n        result.push(createSnippet(key, snippets[key]));\n    }\n\n    return nest(result);\n}\n\n/**\n * Resolves given node: finds matched CSS snippets using fuzzy match and resolves\n * keyword aliases from node value\n */\nfunction resolveNode(node: CSSProperty, snippets: CSSSnippet[], config: Config): CSSProperty {\n    if (!resolveGradient(node, config)) {\n        const score = config.options['stylesheet.fuzzySearchMinScore'];\n        if (isValueScope(config)) {\n            // Resolve as value of given CSS property\n            const propName = config.context!.name;\n            const snippet = snippets.find(s => s.type === CSSSnippetType.Property && s.property === propName) as CSSSnippetProperty | undefined;\n            resolveValueKeywords(node, config, snippet, score);\n            node.snippet = snippet;\n        } else if (node.name) {\n            const snippet = findBestMatch(node.name, snippets, score, true);\n            node.snippet = snippet;\n\n            if (snippet) {\n                if (snippet.type === CSSSnippetType.Property) {\n                    resolveAsProperty(node, snippet, config);\n                } else {\n                    resolveAsSnippet(node, snippet);\n                }\n            }\n        }\n    }\n\n    if (node.name || config.context) {\n        // Resolve numeric values for CSS properties only\n        resolveNumericValue(node, config);\n    }\n\n    return node;\n}\n\n/**\n * Resolves CSS gradient shortcut from given property, if possible\n */\nfunction resolveGradient(node: CSSProperty, config: Config): boolean {\n    let gradientFn: FunctionCall | null = null;\n    const cssVal = node.value.length === 1 ? node.value[0]! : null;\n\n    if (cssVal && cssVal.value.length === 1) {\n        const v = cssVal.value[0]!;\n        if (v.type === 'FunctionCall' && v.name === gradientName) {\n            gradientFn = v;\n        }\n    }\n\n    if (gradientFn || node.name === gradientName) {\n        if (!gradientFn) {\n            gradientFn = {\n                type: 'FunctionCall',\n                name: 'linear-gradient',\n                arguments: [cssValue(field(0, ''))]\n            };\n        } else {\n            gradientFn = {\n                ...gradientFn,\n                name: 'linear-gradient'\n            };\n        }\n\n        if (!config.context) {\n            node.name = 'background-image';\n        }\n        node.value = [cssValue(gradientFn)];\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Resolves given parsed abbreviation node as CSS property\n */\nfunction resolveAsProperty(node: CSSProperty, snippet: CSSSnippetProperty, config: Config): CSSProperty {\n    const abbr = node.name!;\n\n    // Check for unmatched part of abbreviation\n    // For example, in `dib` abbreviation the matched part is `d` and `ib` should\n    // be considered as inline value. If unmatched fragment exists, we should check\n    // if it matches actual value of snippet. If either explicit value is specified\n    // or unmatched fragment did not resolve to to a keyword, we should consider\n    // matched snippet as invalid\n    const inlineValue = getUnmatchedPart(abbr, snippet.key);\n    if (inlineValue) {\n        if (node.value.length) {\n            // Already have value: unmatched part indicates matched snippet is invalid\n            return node;\n        }\n        const kw = resolveKeyword(inlineValue, config, snippet);\n        if (!kw) {\n            return node;\n        }\n        node.value.push(cssValue(kw));\n    }\n\n    node.name = snippet.property;\n\n    if (node.value.length) {\n        // Replace keyword alias from current abbreviation node with matched keyword\n        resolveValueKeywords(node, config, snippet);\n    } else if (snippet.value.length) {\n        const defaultValue = snippet.value[0]!;\n\n        // https://github.com/emmetio/emmet/issues/558\n        // We should auto-select inserted value only if there’s multiple value\n        // choice\n        node.value = snippet.value.length === 1 || defaultValue.some(hasField)\n            ? defaultValue\n            : defaultValue.map(n => wrapWithField(n, config));\n    }\n\n    return node;\n}\n\nfunction resolveValueKeywords(node: CSSProperty, config: Config, snippet?: CSSSnippetProperty, minScore?: number) {\n    for (const cssVal of node.value) {\n        const value: Value[] = [];\n        for (const token of cssVal.value) {\n            if (token.type === 'Literal') {\n                value.push(resolveKeyword(token.value, config, snippet, minScore) || token);\n            } else if (token.type === 'FunctionCall') {\n                // For function calls, we should find matching function call\n                // and merge arguments\n                const match = resolveKeyword(token.name, config, snippet, minScore);\n                if (match && match.type === 'FunctionCall') {\n                    value.push({\n                        ...match,\n                        arguments: token.arguments.concat(match.arguments.slice(token.arguments.length))\n                    });\n                } else {\n                    value.push(token);\n                }\n            } else {\n                value.push(token);\n            }\n        }\n        cssVal.value = value;\n    }\n}\n\n/**\n * Resolves given parsed abbreviation node as a snippet: a plain code chunk\n */\nfunction resolveAsSnippet(node: CSSProperty, snippet: CSSSnippetRaw): CSSProperty {\n    // When resolving snippets, we have to do the following:\n    // 1. Replace field placeholders with actual field tokens.\n    // 2. If input values given, put them instead of fields\n    let offset = 0;\n    let m: RegExpExecArray | null;\n    const reField = /\\$\\{(\\d+)(:[^}]+)?\\}/g;\n    const inputValue = node.value[0];\n    const outputValue: Value[] = [];\n\n    while (m = reField.exec(snippet.value)) {\n        if (offset !== m.index) {\n            outputValue.push(literal(snippet.value.slice(offset, m.index)));\n        }\n        offset = m.index + m[0].length;\n        if (inputValue && inputValue.value.length) {\n            outputValue.push(inputValue.value.shift()!);\n        } else {\n            outputValue.push(field(Number(m[1]), m[2] ? m[2].slice(1) : ''));\n        }\n    }\n\n    const tail = snippet.value.slice(offset);\n    if (tail) {\n        outputValue.push(literal(tail));\n    }\n\n    node.name = void 0;\n    node.value = [cssValue(...outputValue)];\n    return node;\n}\n\n/**\n * Finds best matching item from `items` array\n * @param abbr  Abbreviation to match\n * @param items List of items for match\n * @param minScore The minimum score the best matched item should have to be a valid match.\n */\nexport function findBestMatch<T extends MatchInput>(abbr: string, items: T[], minScore = 0, partialMatch = false): T | null {\n    let matchedItem: T | null = null;\n    let maxScore = 0;\n\n    for (const item of items) {\n        const score = calculateScore(abbr, getScoringPart(item), partialMatch);\n\n        if (score === 1) {\n            // direct hit, no need to look further\n            return item;\n        }\n\n        if (score && score >= maxScore) {\n            maxScore = score;\n            matchedItem = item;\n        }\n    }\n\n    return maxScore >= minScore ? matchedItem : null;\n}\n\nfunction getScoringPart(item: MatchInput): string {\n    return typeof item === 'string' ? item : item.key;\n}\n\n/**\n * Returns a part of `abbr` that wasn’t directly matched against `str`.\n * For example, if abbreviation `poas` is matched against `position`,\n * the unmatched part will be `as` since `a` wasn’t found in string stream\n */\nfunction getUnmatchedPart(abbr: string, str: string): string {\n    for (let i = 0, lastPos = 0; i < abbr.length; i++) {\n        lastPos = str.indexOf(abbr[i], lastPos);\n        if (lastPos === -1) {\n            return abbr.slice(i);\n        }\n        lastPos++;\n    }\n\n    return '';\n}\n\n/**\n * Resolves given keyword shorthand into matched snippet keyword or global keyword,\n * if possible\n */\nfunction resolveKeyword(kw: string, config: Config, snippet?: CSSSnippetProperty, minScore?: number): Literal | FunctionCall | null {\n    let ref: string | null;\n\n    if (snippet) {\n        if (ref = findBestMatch(kw, Object.keys(snippet.keywords), minScore)) {\n            return snippet.keywords[ref];\n        }\n\n        for (const dep of snippet.dependencies) {\n            if (ref = findBestMatch(kw, Object.keys(dep.keywords), minScore)) {\n                return dep.keywords[ref];\n            }\n        }\n    }\n\n    if (ref = findBestMatch(kw, config.options['stylesheet.keywords'], minScore)) {\n        return literal(ref);\n    }\n\n    return null;\n}\n\n/**\n * Resolves numeric values in given abbreviation node\n */\nfunction resolveNumericValue(node: CSSProperty, config: Config) {\n    const aliases = config.options['stylesheet.unitAliases'];\n    const unitless = config.options['stylesheet.unitless'];\n\n    for (const v of node.value) {\n        for (const t of v.value) {\n            if (t.type === 'NumberValue') {\n                if (t.unit) {\n                    t.unit = aliases[t.unit] || t.unit;\n                } else if (t.value !== 0 && !unitless.includes(node.name!)) {\n                    t.unit = t.rawValue.includes('.')\n                        ? config.options['stylesheet.floatUnit']\n                        : config.options['stylesheet.intUnit'];\n                }\n            }\n        }\n    }\n}\n\n/**\n * Constructs CSS value token\n */\nfunction cssValue(...args: Value[]): CSSValue {\n    return {\n        type: 'CSSValue',\n        value: args\n    };\n}\n\n/**\n * Constructs literal token\n */\nfunction literal(value: string): Literal {\n    return { type: 'Literal', value };\n}\n\n/**\n * Constructs field token\n */\nfunction field(index: number, name: string): Field {\n    return { type: 'Field', index, name };\n}\n\n/**\n * Check if given value contains fields\n */\nfunction hasField(value: CSSValue): boolean {\n    for (const v of value.value) {\n        if (v.type === 'Field' || (v.type === 'FunctionCall' && v.arguments.some(hasField))) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ninterface WrapState {\n    index: number;\n}\n\n/**\n * Wraps tokens of given abbreviation with fields\n */\nfunction wrapWithField(node: CSSValue, config: Config, state: WrapState = { index: 1 }): CSSValue {\n    let value: Value[] = [];\n    for (const v of node.value) {\n        switch (v.type) {\n            case 'ColorValue':\n                value.push(field(state.index++, color(v, config.options['stylesheet.shortHex'])));\n                break;\n            case 'Literal':\n                value.push(field(state.index++, v.value));\n                break;\n            case 'NumberValue':\n                value.push(field(state.index++, `${v.value}${v.unit}`));\n                break;\n            case 'StringValue':\n                const q = v.quote === 'single' ? '\\'' : '\"';\n                value.push(field(state.index++, q + v.value + q));\n                break;\n            case 'FunctionCall':\n                value.push(field(state.index++, v.name), literal('('));\n                for (let i = 0, il = v.arguments.length; i < il; i++) {\n                    value = value.concat(wrapWithField(v.arguments[i], config, state).value);\n                    if (i !== il - 1) {\n                        value.push(literal(', '));\n                    }\n                }\n                value.push(literal(')'));\n                break;\n            default:\n                value.push(v);\n        }\n    }\n\n    return {...node, value };\n}\n\n/**\n * Check if abbreviation should be expanded in CSS value context\n */\nfunction isValueScope(config: Config): boolean {\n    if (config.context) {\n        return config.context.name === CSSAbbreviationScope.Value || !config.context.name.startsWith('@@');\n    }\n\n    return false;\n}\n\n/**\n * Returns snippets for given scope\n */\nfunction getSnippetsForScope(snippets: CSSSnippet[], config: Config): CSSSnippet[] {\n    if (config.context) {\n        if (config.context.name === CSSAbbreviationScope.Section) {\n            return snippets.filter(s => s.type === CSSSnippetType.Raw);\n        }\n\n        if (config.context.name === CSSAbbreviationScope.Property) {\n            return snippets.filter(s => s.type === CSSSnippetType.Property);\n        }\n    }\n\n    return snippets;\n}\n","{\n\t\"a\": \"a[href]\",\n\t\"a:blank\": \"a[href='http://${0}' target='_blank' rel='noopener noreferrer']\",\n\t\"a:link\": \"a[href='http://${0}']\",\n\t\"a:mail\": \"a[href='mailto:${0}']\",\n\t\"a:tel\": \"a[href='tel:+${0}']\",\n\t\"abbr\": \"abbr[title]\",\n\t\"acr|acronym\": \"acronym[title]\",\n\t\"base\": \"base[href]/\",\n\t\"basefont\": \"basefont/\",\n\t\"br\": \"br/\",\n\t\"frame\": \"frame/\",\n\t\"hr\": \"hr/\",\n\t\"bdo\": \"bdo[dir]\",\n\t\"bdo:r\": \"bdo[dir=rtl]\",\n\t\"bdo:l\": \"bdo[dir=ltr]\",\n\t\"col\": \"col/\",\n\t\"link\": \"link[rel=stylesheet href]/\",\n\t\"link:css\": \"link[href='${1:style}.css']\",\n\t\"link:print\": \"link[href='${1:print}.css' media=print]\",\n\t\"link:favicon\": \"link[rel='shortcut icon' type=image/x-icon href='${1:favicon.ico}']\",\n\t\"link:mf|link:manifest\": \"link[rel='manifest' href='${1:manifest.json}']\",\n\t\"link:touch\": \"link[rel=apple-touch-icon href='${1:favicon.png}']\",\n\t\"link:rss\": \"link[rel=alternate type=application/rss+xml title=RSS href='${1:rss.xml}']\",\n\t\"link:atom\": \"link[rel=alternate type=application/atom+xml title=Atom href='${1:atom.xml}']\",\n\t\"link:im|link:import\": \"link[rel=import href='${1:component}.html']\",\n\t\"meta\": \"meta/\",\n\t\"meta:utf\": \"meta[http-equiv=Content-Type content='text/html;charset=UTF-8']\",\n\t\"meta:vp\": \"meta[name=viewport content='width=${1:device-width}, initial-scale=${2:1.0}']\",\n\t\"meta:compat\": \"meta[http-equiv=X-UA-Compatible content='${1:IE=7}']\",\n\t\"meta:edge\": \"meta:compat[content='${1:ie=edge}']\",\n\t\"meta:redirect\": \"meta[http-equiv=refresh content='0; url=${1:http://example.com}']\",\n\t\"meta:kw\": \"meta[name=keywords content]\",\n\t\"meta:desc\": \"meta[name=description content]\",\n\t\"style\": \"style\",\n\t\"script\": \"script\",\n\t\"script:src\": \"script[src]\",\n\t\"img\": \"img[src alt]/\",\n\t\"img:s|img:srcset\": \"img[srcset src alt]\",\n\t\"img:z|img:sizes\": \"img[sizes srcset src alt]\",\n\t\"picture\": \"picture\",\n\t\"src|source\": \"source/\",\n\t\"src:sc|source:src\": \"source[src type]\",\n\t\"src:s|source:srcset\": \"source[srcset]\",\n\t\"src:t|source:type\": \"source[srcset type='${1:image/}']\",\n\t\"src:z|source:sizes\": \"source[sizes srcset]\",\n\t\"src:m|source:media\": \"source[media='(${1:min-width: })' srcset]\",\n\t\"src:mt|source:media:type\": \"source:media[type='${2:image/}']\",\n\t\"src:mz|source:media:sizes\": \"source:media[sizes srcset]\",\n\t\"src:zt|source:sizes:type\": \"source[sizes srcset type='${1:image/}']\",\n\t\"iframe\": \"iframe[src frameborder=0]\",\n\t\"embed\": \"embed[src type]/\",\n\t\"object\": \"object[data type]\",\n\t\"param\": \"param[name value]/\",\n\t\"map\": \"map[name]\",\n\t\"area\": \"area[shape coords href alt]/\",\n\t\"area:d\": \"area[shape=default]\",\n\t\"area:c\": \"area[shape=circle]\",\n\t\"area:r\": \"area[shape=rect]\",\n\t\"area:p\": \"area[shape=poly]\",\n\t\"form\": \"form[action]\",\n\t\"form:get\": \"form[method=get]\",\n\t\"form:post\": \"form[method=post]\",\n\t\"label\": \"label[for]\",\n\t\"input\": \"input[type=${1:text}]/\",\n\t\"inp\": \"input[name=${1} id=${1}]\",\n\t\"input:h|input:hidden\": \"input[type=hidden name]\",\n\t\"input:t|input:text\": \"inp[type=text]\",\n\t\"input:search\": \"inp[type=search]\",\n\t\"input:email\": \"inp[type=email]\",\n\t\"input:url\": \"inp[type=url]\",\n\t\"input:p|input:password\": \"inp[type=password]\",\n\t\"input:datetime\": \"inp[type=datetime]\",\n\t\"input:date\": \"inp[type=date]\",\n\t\"input:datetime-local\": \"inp[type=datetime-local]\",\n\t\"input:month\": \"inp[type=month]\",\n\t\"input:week\": \"inp[type=week]\",\n\t\"input:time\": \"inp[type=time]\",\n\t\"input:tel\": \"inp[type=tel]\",\n\t\"input:number\": \"inp[type=number]\",\n\t\"input:color\": \"inp[type=color]\",\n\t\"input:c|input:checkbox\": \"inp[type=checkbox]\",\n\t\"input:r|input:radio\": \"inp[type=radio]\",\n\t\"input:range\": \"inp[type=range]\",\n\t\"input:f|input:file\": \"inp[type=file]\",\n\t\"input:s|input:submit\": \"input[type=submit value]\",\n\t\"input:i|input:image\": \"input[type=image src alt]\",\n\t\"input:b|input:btn|input:button\": \"input[type=button value]\",\n\t\"input:reset\": \"input:button[type=reset]\",\n\t\"isindex\": \"isindex/\",\n\t\"select\": \"select[name=${1} id=${1}]\",\n\t\"select:d|select:disabled\": \"select[disabled.]\",\n\t\"opt|option\": \"option[value]\",\n\t\"textarea\": \"textarea[name=${1} id=${1} cols=${2:30} rows=${3:10}]\",\n\t\"marquee\": \"marquee[behavior direction]\",\n\t\"menu:c|menu:context\": \"menu[type=context]\",\n\t\"menu:t|menu:toolbar\": \"menu[type=toolbar]\",\n\t\"video\": \"video[src]\",\n\t\"audio\": \"audio[src]\",\n\t\"html:xml\": \"html[xmlns=http://www.w3.org/1999/xhtml]\",\n\t\"keygen\": \"keygen/\",\n\t\"command\": \"command/\",\n\t\"btn:s|button:s|button:submit\" : \"button[type=submit]\",\n\t\"btn:r|button:r|button:reset\" : \"button[type=reset]\",\n\t\"btn:d|button:d|button:disabled\" : \"button[disabled.]\",\n\t\"fst:d|fset:d|fieldset:d|fieldset:disabled\" : \"fieldset[disabled.]\",\n\n\t\"bq\": \"blockquote\",\n\t\"fig\": \"figure\",\n\t\"figc\": \"figcaption\",\n\t\"pic\": \"picture\",\n\t\"ifr\": \"iframe\",\n\t\"emb\": \"embed\",\n\t\"obj\": \"object\",\n\t\"cap\": \"caption\",\n\t\"colg\": \"colgroup\",\n\t\"fst\": \"fieldset\",\n\t\"btn\": \"button\",\n\t\"optg\": \"optgroup\",\n\t\"tarea\": \"textarea\",\n\t\"leg\": \"legend\",\n\t\"sect\": \"section\",\n\t\"art\": \"article\",\n\t\"hdr\": \"header\",\n\t\"ftr\": \"footer\",\n\t\"adr\": \"address\",\n\t\"dlg\": \"dialog\",\n\t\"str\": \"strong\",\n\t\"prog\": \"progress\",\n\t\"mn\": \"main\",\n\t\"tem\": \"template\",\n\t\"fset\": \"fieldset\",\n\t\"datag\": \"datagrid\",\n\t\"datal\": \"datalist\",\n\t\"kg\": \"keygen\",\n\t\"out\": \"output\",\n\t\"det\": \"details\",\n\t\"sum\": \"summary\",\n\t\"cmd\": \"command\",\n\n\t\"ri:d|ri:dpr\": \"img:s\",\n\t\"ri:v|ri:viewport\": \"img:z\",\n\t\"ri:a|ri:art\": \"pic>src:m+img\",\n\t\"ri:t|ri:type\": \"pic>src:t+img\",\n\n\t\"!!!\": \"{<!DOCTYPE html>}\",\n\t\"doc\": \"html[lang=${lang}]>(head>meta[charset=${charset}]+meta[http-equiv='X-UA-Compatible'][content='IE=edge']+meta:vp+title{${1:Document}})+body\",\n\t\"!|html:5\": \"!!!+doc\",\n\n\t\"c\": \"{<!-- ${0} -->}\",\n\t\"cc:ie\": \"{<!--[if IE]>${0}<![endif]-->}\",\n\t\"cc:noie\": \"{<!--[if !IE]><!-->${0}<!--<![endif]-->}\"\n}\n","{\n\t\"@f\": \"@font-face {\\n\\tfont-family: ${1};\\n\\tsrc: url(${2});\\n}\",\n\t\"@ff\": \"@font-face {\\n\\tfont-family: '${1:FontName}';\\n\\tsrc: url('${2:FileName}.eot');\\n\\tsrc: url('${2:FileName}.eot?#iefix') format('embedded-opentype'),\\n\\t\\t url('${2:FileName}.woff') format('woff'),\\n\\t\\t url('${2:FileName}.ttf') format('truetype'),\\n\\t\\t url('${2:FileName}.svg#${1:FontName}') format('svg');\\n\\tfont-style: ${3:normal};\\n\\tfont-weight: ${4:normal};\\n}\",\n\t\"@i|@import\": \"@import url(${0});\",\n\t\"@kf\": \"@keyframes ${1:identifier} {\\n\\t${2}\\n}\",\n\t\"@m|@media\": \"@media ${1:screen} {\\n\\t${0}\\n}\",\n\t\"ac\": \"align-content:start|end|flex-start|flex-end|center|space-between|space-around|stretch|space-evenly\",\n\t\"ai\": \"align-items:start|end|flex-start|flex-end|center|baseline|stretch\",\n\t\"anim\": \"animation:${1:name} ${2:duration} ${3:timing-function} ${4:delay} ${5:iteration-count} ${6:direction} ${7:fill-mode}\",\n\t\"animdel\": \"animation-delay:time\",\n\t\"animdir\": \"animation-direction:normal|reverse|alternate|alternate-reverse\",\n\t\"animdur\": \"animation-duration:${1:0}s\",\n\t\"animfm\": \"animation-fill-mode:both|forwards|backwards\",\n\t\"animic\": \"animation-iteration-count:1|infinite\",\n\t\"animn\": \"animation-name\",\n\t\"animps\": \"animation-play-state:running|paused\",\n\t\"animtf\": \"animation-timing-function:linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(${1:0.1}, ${2:0.7}, ${3:1.0}, ${3:0.1})\",\n\t\"ap\": \"appearance:none\",\n\t\"as\": \"align-self:start|end|auto|flex-start|flex-end|center|baseline|stretch\",\n\t\"b\": \"bottom\",\n\t\"bd\": \"border:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdb\": \"border-bottom:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdbc\": \"border-bottom-color:${1:#000}\",\n\t\"bdbi\": \"border-bottom-image:url(${0})\",\n\t\"bdbk\": \"border-break:close\",\n\t\"bdbli\": \"border-bottom-left-image:url(${0})|continue\",\n\t\"bdblrs\": \"border-bottom-left-radius\",\n\t\"bdbri\": \"border-bottom-right-image:url(${0})|continue\",\n\t\"bdbrrs\": \"border-bottom-right-radius\",\n\t\"bdbs\": \"border-bottom-style\",\n\t\"bdbw\": \"border-bottom-width\",\n\t\"bdc\": \"border-color:${1:#000}\",\n\t\"bdci\": \"border-corner-image:url(${0})|continue\",\n\t\"bdcl\": \"border-collapse:collapse|separate\",\n\t\"bdf\": \"border-fit:repeat|clip|scale|stretch|overwrite|overflow|space\",\n\t\"bdi\": \"border-image:url(${0})\",\n\t\"bdl\": \"border-left:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdlc\": \"border-left-color:${1:#000}\",\n\t\"bdlen\": \"border-length\",\n\t\"bdli\": \"border-left-image:url(${0})\",\n\t\"bdls\": \"border-left-style\",\n\t\"bdlw\": \"border-left-width\",\n\t\"bdr\": \"border-right:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdrc\": \"border-right-color:${1:#000}\",\n\t\"bdri\": \"border-right-image:url(${0})\",\n\t\"bdrs\": \"border-radius\",\n\t\"bdrst\": \"border-right-style\",\n\t\"bdrw\": \"border-right-width\",\n\t\"bds\": \"border-style:none|hidden|dotted|dashed|solid|double|dot-dash|dot-dot-dash|wave|groove|ridge|inset|outset\",\n\t\"bdsp\": \"border-spacing\",\n\t\"bdt\": \"border-top:${1:1px} ${2:solid} ${3:#000}\",\n\t\"bdtc\": \"border-top-color:${1:#000}\",\n\t\"bdti\": \"border-top-image:url(${0})\",\n\t\"bdtli\": \"border-top-left-image:url(${0})|continue\",\n\t\"bdtlrs\": \"border-top-left-radius\",\n\t\"bdtri\": \"border-top-right-image:url(${0})|continue\",\n\t\"bdtrrs\": \"border-top-right-radius\",\n\t\"bdts\": \"border-top-style\",\n\t\"bdtw\": \"border-top-width\",\n\t\"bdw\": \"border-width\",\n\t\"bfv\": \"backface-visibility:hidden|visible\",\n\t\"bg\": \"background:${1:#000}\",\n\t\"bga\": \"background-attachment:fixed|scroll\",\n\t\"bgbk\": \"background-break:bounding-box|each-box|continuous\",\n\t\"bgc\": \"background-color:#${1:fff}\",\n\t\"bgcp\": \"background-clip:padding-box|border-box|content-box|no-clip\",\n\t\"bgi\": \"background-image:url(${0})\",\n\t\"bgo\": \"background-origin:padding-box|border-box|content-box\",\n\t\"bgp\": \"background-position:${1:0} ${2:0}\",\n\t\"bgpx\": \"background-position-x\",\n\t\"bgpy\": \"background-position-y\",\n\t\"bgr\": \"background-repeat:no-repeat|repeat-x|repeat-y|space|round\",\n\t\"bgsz\": \"background-size:contain|cover\",\n\t\"bxsh\": \"box-shadow:${1:inset }${2:hoff} ${3:voff} ${4:blur} ${5:#000}|none\",\n\t\"bxsz\": \"box-sizing:border-box|content-box|border-box\",\n\t\"c\": \"color:${1:#000}\",\n\t\"cr\": \"color:rgb(${1:0}, ${2:0}, ${3:0})\",\n\t\"cra\": \"color:rgba(${1:0}, ${2:0}, ${3:0}, ${4:.5})\",\n\t\"cl\": \"clear:both|left|right|none\",\n\t\"cm\": \"/* ${0} */\",\n\t\"cnt\": \"content:'${0}'|normal|open-quote|no-open-quote|close-quote|no-close-quote|attr(${0})|counter(${0})|counters(${0})\",\n\t\"coi\": \"counter-increment\",\n\t\"colm\": \"columns\",\n\t\"colmc\": \"column-count\",\n\t\"colmf\": \"column-fill\",\n\t\"colmg\": \"column-gap\",\n\t\"colmr\": \"column-rule\",\n\t\"colmrc\": \"column-rule-color\",\n\t\"colmrs\": \"column-rule-style\",\n\t\"colmrw\": \"column-rule-width\",\n\t\"colms\": \"column-span\",\n\t\"colmw\": \"column-width\",\n\t\"cor\": \"counter-reset\",\n\t\"cp\": \"clip:auto|rect(${1:top} ${2:right} ${3:bottom} ${4:left})\",\n\t\"cps\": \"caption-side:top|bottom\",\n\t\"cur\": \"cursor:pointer|auto|default|crosshair|hand|help|move|pointer|text\",\n\t\"d\": \"display:block|none|flex|inline-flex|inline|inline-block|grid|inline-grid|subgrid|list-item|run-in|compact|table|inline-table|table-caption|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group|table-cell|ruby|ruby-base|ruby-base-group|ruby-text|ruby-text-group\",\n\t\"ec\": \"empty-cells:show|hide\",\n\t\"f\": \"font:${1:1em} ${2:sans-serif}\",\n\t\"fd\": \"font-display:auto|block|swap|fallback|optional\",\n\t\"fef\": \"font-effect:none|engrave|emboss|outline\",\n\t\"fem\": \"font-emphasize\",\n\t\"femp\": \"font-emphasize-position:before|after\",\n\t\"fems\": \"font-emphasize-style:none|accent|dot|circle|disc\",\n\t\"ff\": \"font-family:serif|sans-serif|cursive|fantasy|monospace\",\n\t\"fft\": \"font-family:\\\"Times New Roman\\\", Times, Baskerville, Georgia, serif\",\n\t\"ffa\": \"font-family:Arial, \\\"Helvetica Neue\\\", Helvetica, sans-serif\",\n\t\"ffv\": \"font-family:Verdana, Geneva, sans-serif\",\n\t\"fl\": \"float:left|right|none\",\n\t\"fs\": \"font-style:italic|normal|oblique\",\n\t\"fsm\": \"font-smoothing:antialiased|subpixel-antialiased|none\",\n\t\"fst\": \"font-stretch:normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded\",\n\t\"fv\": \"font-variant:normal|small-caps\",\n\t\"fvs\": \"font-variation-settings:normal|inherit|initial|unset\",\n\t\"fw\": \"font-weight:normal|bold|bolder|lighter\",\n\t\"fx\": \"flex\",\n\t\"fxb\": \"flex-basis:fill|max-content|min-content|fit-content|content\",\n\t\"fxd\": \"flex-direction:row|row-reverse|column|column-reverse\",\n\t\"fxf\": \"flex-flow\",\n\t\"fxg\": \"flex-grow\",\n\t\"fxsh\": \"flex-shrink\",\n\t\"fxw\": \"flex-wrap:nowrap|wrap|wrap-reverse\",\n\t\"fsz\": \"font-size\",\n\t\"fsza\": \"font-size-adjust\",\n\t\"gtc\": \"grid-template-columns:repeat(${0})|minmax()\",\n\t\"gtr\": \"grid-template-rows:repeat(${0})|minmax()\",\n\t\"gta\": \"grid-template-areas\",\n\t\"gt\": \"grid-template\",\n\t\"gg\": \"grid-gap\",\n\t\"gcg\": \"grid-column-gap\",\n\t\"grg\": \"grid-row-gap\",\n\t\"gac\": \"grid-auto-columns:auto|minmax()\",\n\t\"gar\": \"grid-auto-rows:auto|minmax()\",\n\t\"gaf\": \"grid-auto-flow:row|column|dense|inherit|initial|unset\",\n\t\"gd\": \"grid\",\n\t\"gc\": \"grid-column\",\n\t\"gcs\": \"grid-column-start\",\n\t\"gce\": \"grid-column-end\",\n\t\"gr\": \"grid-row\",\n\t\"grs\": \"grid-row-start\",\n\t\"gre\": \"grid-row-end\",\n\t\"ga\": \"grid-area\",\n\t\"h\": \"height\",\n\t\"jc\": \"justify-content:start|end|stretch|flex-start|flex-end|center|space-between|space-around|space-evenly\",\n\t\"ji\": \"justify-items:start|end|center|stretch\",\n\t\"js\": \"justify-self:start|end|center|stretch\",\n\t\"l\": \"left\",\n\t\"lg\": \"background-image:linear-gradient(${1})\",\n\t\"lh\": \"line-height\",\n\t\"lis\": \"list-style\",\n\t\"lisi\": \"list-style-image\",\n\t\"lisp\": \"list-style-position:inside|outside\",\n\t\"list\": \"list-style-type:disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman\",\n\t\"lts\": \"letter-spacing:normal\",\n\t\"m\": \"margin\",\n\t\"mah\": \"max-height\",\n\t\"mar\": \"max-resolution\",\n\t\"maw\": \"max-width\",\n\t\"mb\": \"margin-bottom\",\n\t\"mih\": \"min-height\",\n\t\"mir\": \"min-resolution\",\n\t\"miw\": \"min-width\",\n\t\"ml\": \"margin-left\",\n\t\"mr\": \"margin-right\",\n\t\"mt\": \"margin-top\",\n\t\"ol\": \"outline\",\n\t\"olc\": \"outline-color:${1:#000}|invert\",\n\t\"olo\": \"outline-offset\",\n\t\"ols\": \"outline-style:none|dotted|dashed|solid|double|groove|ridge|inset|outset\",\n\t\"olw\": \"outline-width|thin|medium|thick\",\n\t\"op|opa\": \"opacity\",\n\t\"ord\": \"order\",\n\t\"ori\": \"orientation:landscape|portrait\",\n\t\"orp\": \"orphans\",\n\t\"ov\": \"overflow:hidden|visible|hidden|scroll|auto\",\n\t\"ovs\": \"overflow-style:scrollbar|auto|scrollbar|panner|move|marquee\",\n\t\"ovx\": \"overflow-x:hidden|visible|hidden|scroll|auto\",\n\t\"ovy\": \"overflow-y:hidden|visible|hidden|scroll|auto\",\n\t\"p\": \"padding\",\n\t\"pb\": \"padding-bottom\",\n\t\"pgba\": \"page-break-after:auto|always|left|right\",\n\t\"pgbb\": \"page-break-before:auto|always|left|right\",\n\t\"pgbi\": \"page-break-inside:auto|avoid\",\n\t\"pl\": \"padding-left\",\n\t\"pos\": \"position:relative|absolute|relative|fixed|static\",\n\t\"pr\": \"padding-right\",\n\t\"pt\": \"padding-top\",\n\t\"q\": \"quotes\",\n\t\"qen\": \"quotes:'\\\\201C' '\\\\201D' '\\\\2018' '\\\\2019'\",\n\t\"qru\": \"quotes:'\\\\00AB' '\\\\00BB' '\\\\201E' '\\\\201C'\",\n\t\"r\": \"right\",\n\t\"rsz\": \"resize:none|both|horizontal|vertical\",\n\t\"t\": \"top\",\n\t\"ta\": \"text-align:left|center|right|justify\",\n\t\"tal\": \"text-align-last:left|center|right\",\n\t\"tbl\": \"table-layout:fixed\",\n\t\"td\": \"text-decoration:none|underline|overline|line-through\",\n\t\"te\": \"text-emphasis:none|accent|dot|circle|disc|before|after\",\n\t\"th\": \"text-height:auto|font-size|text-size|max-size\",\n\t\"ti\": \"text-indent\",\n\t\"tj\": \"text-justify:auto|inter-word|inter-ideograph|inter-cluster|distribute|kashida|tibetan\",\n\t\"to\": \"text-outline:${1:0} ${2:0} ${3:#000}\",\n\t\"tov\": \"text-overflow:ellipsis|clip\",\n\t\"tr\": \"text-replace\",\n\t\"trf\": \"transform:${1}|skewX(${1:angle})|skewY(${1:angle})|scale(${1:x}, ${2:y})|scaleX(${1:x})|scaleY(${1:y})|scaleZ(${1:z})|scale3d(${1:x}, ${2:y}, ${3:z})|rotate(${1:angle})|rotateX(${1:angle})|rotateY(${1:angle})|rotateZ(${1:angle})|translate(${1:x}, ${2:y})|translateX(${1:x})|translateY(${1:y})|translateZ(${1:z})|translate3d(${1:tx}, ${2:ty}, ${3:tz})\",\n\t\"trfo\": \"transform-origin\",\n\t\"trfs\": \"transform-style:preserve-3d\",\n\t\"trs\": \"transition:${1:prop} ${2:time}\",\n\t\"trsde\": \"transition-delay:${1:time}\",\n\t\"trsdu\": \"transition-duration:${1:time}\",\n\t\"trsp\": \"transition-property:${1:prop}\",\n\t\"trstf\": \"transition-timing-function:${1:fn}\",\n\t\"tsh\": \"text-shadow:${1:hoff} ${2:voff} ${3:blur} ${4:#000}\",\n\t\"tt\": \"text-transform:uppercase|lowercase|capitalize|none\",\n\t\"tw\": \"text-wrap:none|normal|unrestricted|suppress\",\n\t\"us\": \"user-select:none\",\n\t\"v\": \"visibility:hidden|visible|collapse\",\n\t\"va\": \"vertical-align:top|super|text-top|middle|baseline|bottom|text-bottom|sub\",\n\t\"w\": \"width\",\n\t\"whs\": \"white-space:nowrap|pre|pre-wrap|pre-line|normal\",\n\t\"whsc\": \"white-space-collapse:normal|keep-all|loose|break-strict|break-all\",\n\t\"wid\": \"widows\",\n\t\"wm\": \"writing-mode:lr-tb|lr-tb|lr-bt|rl-tb|rl-bt|tb-rl|tb-lr|bt-lr|bt-rl\",\n\t\"wob\": \"word-break:normal|keep-all|break-all\",\n\t\"wos\": \"word-spacing\",\n\t\"wow\": \"word-wrap:none|unrestricted|suppress|break-word|normal\",\n\t\"z\": \"z-index\",\n\t\"zom\": \"zoom:1\"\n}\n","{\n    \"tm|tmatch\": \"xsl:template[match mode]\",\n    \"tn|tname\": \"xsl:template[name]\",\n    \"call\": \"xsl:call-template[name]\",\n    \"ap\": \"xsl:apply-templates[select mode]\",\n    \"api\": \"xsl:apply-imports\",\n    \"imp\": \"xsl:import[href]\",\n    \"inc\": \"xsl:include[href]\",\n    \"ch\": \"xsl:choose\",\n    \"wh|xsl:when\": \"xsl:when[test]\",\n    \"ot\": \"xsl:otherwise\",\n    \"if\": \"xsl:if[test]\",\n    \"par\": \"xsl:param[name]\",\n    \"pare\": \"xsl:param[name select]\",\n    \"var\": \"xsl:variable[name]\",\n    \"vare\": \"xsl:variable[name select]\",\n    \"wp\": \"xsl:with-param[name select]\",\n    \"key\": \"xsl:key[name match use]\",\n    \"elem\": \"xsl:element[name]\",\n    \"attr\": \"xsl:attribute[name]\",\n    \"attrs\": \"xsl:attribute-set[name]\",\n    \"cp\": \"xsl:copy[select]\",\n    \"co\": \"xsl:copy-of[select]\",\n    \"val\": \"xsl:value-of[select]\",\n    \"for|each\": \"xsl:for-each[select]\",\n    \"tex\": \"xsl:text\",\n    \"com\": \"xsl:comment\",\n    \"msg\": \"xsl:message[terminate=no]\",\n    \"fall\": \"xsl:fallback\",\n    \"num\": \"xsl:number[value]\",\n    \"nam\": \"namespace-alias[stylesheet-prefix result-prefix]\",\n    \"pres\": \"xsl:preserve-space[elements]\",\n    \"strip\": \"xsl:strip-space[elements]\",\n    \"proc\": \"xsl:processing-instruction[name]\",\n    \"sort\": \"xsl:sort[select order]\",\n    \"choose\": \"xsl:choose>xsl:when+xsl:otherwise\",\n    \"xsl\": \"!!!+xsl:stylesheet[version=1.0 xmlns:xsl=http://www.w3.org/1999/XSL/Transform]>{\\n|}\",\n    \"!!!\": \"{<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>}\"\n}","{\n\t\"!!!\": \"{doctype html}\"\n}\n","{\n\t\"lang\": \"en\",\n\t\"locale\": \"en-US\",\n\t\"charset\": \"UTF-8\",\n\t\"indentation\": \"\\t\",\n\t\"newline\": \"\\n\"\n}\n","import { Abbreviation } from '@emmetio/abbreviation';\nimport markupSnippets from '../snippets/html.json';\nimport stylesheetSnippets from '../snippets/css.json';\nimport xslSnippets from '../snippets/xsl.json';\nimport pugSnippets from '../snippets/pug.json';\nimport variables from '../snippets/variables.json';\nimport { CSSSnippet } from './stylesheet/snippets';\n\nexport type SyntaxType = 'markup' | 'stylesheet';\nexport type FieldOutput = (index: number, placeholder: string, offset: number, line: number, column: number) => string;\nexport type TextOutput = (text: string, offset: number, line: number, column: number) => string;\nexport type StringCase = '' | 'lower' | 'upper';\nexport interface SnippetsMap {\n    [name: string]: string;\n}\n\nexport interface AbbreviationContext {\n    name: string;\n    attributes?: { [name: string]: string | null };\n}\n\n/**\n * Raw config which contains per-syntax options. `markup` and `syntax` keys are\n * reserved for global settings for all markup and stylesheet syntaxes\n */\nexport interface GlobalConfig {\n    [syntax: string]: Partial<BaseConfig>;\n}\n\nexport interface BaseConfig {\n    /* Type of abbreviation context, default is `markup` */\n    type: SyntaxType;\n\n    /** Options for abbreviation output */\n    options: Partial<Options>;\n\n    /** Substitutions for variable names */\n    variables: SnippetsMap;\n\n    /** Abbreviation name to snippets mapping */\n    snippets: SnippetsMap;\n}\n\ninterface ResolvedConfig extends BaseConfig {\n    /** Host syntax */\n    syntax: string;\n\n    /**\n     * Context of abbreviation. For markup abbreviation, it contains parent tag\n     * name with attributes, for stylesheet abbreviation it contains property name\n     * if abbreviation is expanded as value\n     */\n    context?: AbbreviationContext;\n\n    /** Text to wrap with abbreviation */\n    text?: string | string[];\n\n    /** Max amount of repeated elements (fool proof) */\n    maxRepeat?: number;\n\n    /**\n     * Object for storing internal cache data to be shared across Emmet methods\n     * invocation. If provided, Emmet will store compute-intensive data in this\n     * object and will re-use it during editor session.\n     * Every time user settings are changed, you should empty cache by passing\n     * new object.\n     */\n    cache?: Cache;\n}\n\nexport type Config = ResolvedConfig & { options: Options };\nexport type UserConfig = Partial<ResolvedConfig>;\n\nexport interface Cache {\n    stylesheetSnippets?: CSSSnippet[];\n    markupSnippets?: { [name: string]: Abbreviation | null };\n}\n\nexport interface Options {\n    /////////////////////\n    // Generic options //\n    /////////////////////\n\n    /** A list of inline-level elements */\n    inlineElements: string[];\n\n    ////////////////////\n    // Output options //\n    ////////////////////\n\n    /** A string for one level indent */\n    'output.indent': string;\n\n    /**\n     * A string for base indent, e.g. context indentation which will be added\n     * for every generated line\n     */\n    'output.baseIndent': string;\n\n    /** A string to use as a new line */\n    'output.newline': string;\n\n    /** Tag case: lower, upper or '' (keep as-is) */\n    'output.tagCase': StringCase;\n\n    /** Attribute name case: lower, upper or '' (keep as-is) */\n    'output.attributeCase': StringCase;\n\n    /** Attribute value quotes: 'single' or 'double' */\n    'output.attributeQuotes': 'single' | 'double';\n\n    /** Enable output formatting (indentation and line breaks) */\n    'output.format': boolean;\n\n    /** When enabled, automatically adds inner line breaks for leaf (e.g. without children) nodes */\n    'output.formatLeafNode': boolean;\n\n    /** A list of tag names that should not get inner indentation */\n    'output.formatSkip': string[];\n\n    /** A list of tag names that should *always* get inner indentation. */\n    'output.formatForce': string[];\n\n    /**\n     * How many inline sibling elements should force line break for each tag.\n     * Set to `0` to output all inline elements without formatting.\n     * Set to `1` to output all inline elements with formatting (same as block-level).\n     */\n    'output.inlineBreak': number;\n\n    /**\n     * Produce compact notation of boolean attributes: attributes which doesn’t have value.\n     * With this option enabled, outputs `<div contenteditable>` instead of\n     * `<div contenteditable=\"contenteditable\">`\n     */\n    'output.compactBoolean': boolean;\n\n    /** A list of boolean attributes */\n    'output.booleanAttributes': string[];\n\n    /** Reverses attribute merging directions when resolving snippets */\n    'output.reverseAttributes': boolean;\n\n    /** Style of self-closing tags: html (`<br>`), xml (`<br/>`) or xhtml (`<br />`) */\n    'output.selfClosingStyle': 'html' | 'xml' | 'xhtml';\n\n    /**\n     * A function that takes field index and optional placeholder and returns\n     * a string field (tabstop) for host editor. For example, a TextMate-style\n     * field is `$index` or `${index:placeholder}`\n     * @param index Field index\n     * @param placeholder Field placeholder (default value), if any\n     * @param offset Current character offset from the beginning of generated content\n     * @param line Current line of generated output\n     * @param column Current column in line\n     */\n    'output.field': FieldOutput;\n\n    /**\n     * A function for processing text chunk passed to `OutputStream`.\n     * May be used by editor for escaping characters, if necessary\n     */\n    'output.text': TextOutput;\n\n    ////////////////////\n    // Markup options //\n    ////////////////////\n\n    /**\n     * Automatically update value of <a> element's href attribute\n     * if inserting URL or email\n     */\n    'markup.href': boolean;\n\n    ////////////////////////////////\n    // Element commenting options //\n    ////////////////////////////////\n\n    /**\n     * Enable/disable element commenting: generate comments before open and/or\n     * after close tag\n     */\n    'comment.enabled': boolean;\n\n    /**\n     * Attributes that should trigger node commenting on specific node,\n     * if commenting is enabled\n     */\n    'comment.trigger': string[];\n\n    /**\n     * Template string for comment to be placed *before* opening tag\n     */\n    'comment.before': string;\n\n    /**\n     * Template string for comment to be placed *after* closing tag.\n     * Example: `\\n<!-- /[#ID][.CLASS] -->`\n     */\n    'comment.after': string;\n\n    /////////////////\n    // BEM options //\n    /////////////////\n\n    /** Enable/disable BEM addon */\n    'bem.enabled': boolean;\n\n    /** A string for separating elements in output class */\n    'bem.element': string;\n\n    /** A string for separating modifiers in output class */\n    'bem.modifier': string;\n\n    /////////////////\n    // JSX options //\n    /////////////////\n\n    /** Enable/disable JSX addon */\n    'jsx.enabled': boolean;\n\n    ////////////////////////\n    // Stylesheet options //\n    ////////////////////////\n\n    /** List of globally available keywords for properties */\n    'stylesheet.keywords': string[];\n\n    /**\n     * List of unitless properties, e.g. properties where numeric values without\n     * explicit unit will be outputted as is, without default value\n     */\n    'stylesheet.unitless': string[];\n\n    /** Use short hex notation where possible, e.g. `#000` instead of `#000000` */\n    'stylesheet.shortHex': boolean;\n\n    /** A string between property name and value */\n    'stylesheet.between': string;\n\n    /** A string after property value */\n    'stylesheet.after': string;\n\n    /** A unit suffix to output by default after integer values, 'px' by default */\n    'stylesheet.intUnit': string;\n\n    /** A unit suffix to output by default after float values, 'em' by default */\n    'stylesheet.floatUnit': string;\n\n    /**\n     * Aliases for custom units in abbreviation. For example, `r: 'rem'` will\n     * output `10rem` for abbreviation `10r`\n     */\n    'stylesheet.unitAliases': SnippetsMap;\n\n    /** Output abbreviation as JSON object properties (for CSS-in-JS syntaxes) */\n    'stylesheet.json': boolean;\n\n    /** Use double quotes for JSON values */\n    'stylesheet.jsonDoubleQuotes': boolean;\n\n    /**\n     * A float number between 0 and 1 to pick fuzzy-matched abbreviations.\n     * Lower value will pick more abbreviations (and less accurate)\n     */\n    'stylesheet.fuzzySearchMinScore': number;\n}\n\n/**\n * Default syntaxes for abbreviation types\n */\nexport const defaultSyntaxes: { [name in SyntaxType]: string } = {\n    markup: 'html',\n    stylesheet: 'css'\n};\n\n/**\n * List of all known syntaxes\n */\nexport const syntaxes = {\n    markup: ['html', 'xml', 'xsl', 'jsx', 'js', 'pug', 'slim', 'haml'],\n    stylesheet: ['css', 'sass', 'scss', 'less', 'sss', 'stylus']\n};\n\nexport const defaultOptions: Options = {\n    'inlineElements': [\n        'a', 'abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo',\n        'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i',\n        'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q',\n        's', 'samp', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup',\n        'textarea', 'tt', 'u', 'var'\n    ],\n    'output.indent': '\\t',\n    'output.baseIndent': '',\n    'output.newline': '\\n',\n    'output.tagCase': '',\n    'output.attributeCase': '',\n    'output.attributeQuotes': 'double',\n    'output.format': true,\n    'output.formatLeafNode': false,\n    'output.formatSkip': ['html'],\n    'output.formatForce': ['body'],\n    'output.inlineBreak': 3,\n    'output.compactBoolean': false,\n    'output.booleanAttributes': [\n        'contenteditable', 'seamless', 'async', 'autofocus',\n        'autoplay', 'checked', 'controls', 'defer', 'disabled', 'formnovalidate',\n        'hidden', 'ismap', 'loop', 'multiple', 'muted', 'novalidate', 'readonly',\n        'required', 'reversed', 'selected', 'typemustmatch'\n    ],\n    'output.reverseAttributes': false,\n    'output.selfClosingStyle': 'html',\n    'output.field': (index, placeholder) => placeholder,\n    'output.text': text => text,\n\n    'markup.href': true,\n\n    'comment.enabled': false,\n    'comment.trigger': ['id', 'class'],\n    'comment.before': '',\n    'comment.after': '\\n<!-- /[#ID][.CLASS] -->',\n\n    'bem.enabled': false,\n    'bem.element': '__',\n    'bem.modifier': '_',\n\n    'jsx.enabled': false,\n\n    'stylesheet.keywords': ['auto', 'inherit', 'unset', 'none'],\n    'stylesheet.unitless': ['z-index', 'line-height', 'opacity', 'font-weight', 'zoom', 'flex', 'flex-grow', 'flex-shrink'],\n    'stylesheet.shortHex': true,\n    'stylesheet.between': ': ',\n    'stylesheet.after': ';',\n    'stylesheet.intUnit': 'px',\n    'stylesheet.floatUnit': 'em',\n    'stylesheet.unitAliases': { e: 'em', p: '%', x: 'ex', r: 'rem' },\n    'stylesheet.json': false,\n    'stylesheet.jsonDoubleQuotes': false,\n    'stylesheet.fuzzySearchMinScore': 0\n};\n\nexport const defaultConfig: Config = {\n    type: 'markup',\n    syntax: 'html',\n    variables,\n    snippets: {},\n    options: defaultOptions\n};\n\n/**\n * Default per-syntax config\n */\nexport const syntaxConfig: GlobalConfig = {\n    markup: {\n        snippets: parseSnippets(markupSnippets),\n    },\n    xhtml: {\n        options: {\n            'output.selfClosingStyle': 'xhtml'\n        }\n    },\n    xml: {\n        options: {\n            'output.selfClosingStyle': 'xml'\n        }\n    },\n    xsl: {\n        snippets: parseSnippets(xslSnippets),\n        options: {\n            'output.selfClosingStyle': 'xml'\n        }\n    },\n    jsx: {\n        options: {\n            'jsx.enabled': true\n        }\n    },\n    pug: {\n        snippets: parseSnippets(pugSnippets)\n    },\n\n    stylesheet: {\n        snippets: parseSnippets(stylesheetSnippets)\n    },\n\n    sass: {\n        options: {\n            'stylesheet.after': ''\n        }\n    },\n    stylus: {\n        options: {\n            'stylesheet.between': ' ',\n            'stylesheet.after': '',\n        }\n    }\n};\n\n/**\n * Parses raw snippets definitions with possibly multiple keys into a plan\n * snippet map\n */\nexport function parseSnippets(snippets: SnippetsMap): SnippetsMap {\n    const result: SnippetsMap = {};\n    Object.keys(snippets).forEach(k => {\n        for (const name of k.split('|')) {\n            result[name] = snippets[k];\n        }\n    });\n\n    return result;\n}\n\nexport default function resolveConfig(config: UserConfig = {}, globals: GlobalConfig = {}): Config {\n    const type: SyntaxType = config.type || 'markup';\n    const syntax: string = config.syntax || defaultSyntaxes[type];\n\n    return {\n        ...defaultConfig,\n        ...config,\n        type,\n        syntax,\n        variables: mergedData(type, syntax, 'variables', config, globals),\n        snippets: mergedData(type, syntax, 'snippets', config, globals),\n        options: mergedData(type, syntax, 'options', config, globals)\n    };\n}\n\nfunction mergedData<K extends keyof BaseConfig>(type: SyntaxType, syntax: string, key: K, config: UserConfig, globals: GlobalConfig = {}): Config[K] {\n    const typeDefaults = syntaxConfig[type];\n    const typeOverride = globals[type];\n    const syntaxDefaults = syntaxConfig[syntax];\n    const syntaxOverride = globals[syntax];\n\n    return {\n        ...(defaultConfig[key] as object),\n        ...(typeDefaults && typeDefaults[key] as object),\n        ...(syntaxDefaults && syntaxDefaults[key] as object),\n        ...(typeOverride && typeOverride[key] as object),\n        ...(syntaxOverride && syntaxOverride[key] as object),\n        ...(config[key] as object)\n    } as Config[K];\n}\n","type Match = ((code: number) => boolean) | number;\n\nexport interface BackwardScanner {\n    /** Text to scan */\n    text: string;\n\n    /** Left bound till given text must be scanned */\n    start: number;\n\n    /** Current scanner position */\n    pos: number;\n}\n\n/**\n * Creates structure for scanning given string in backward direction\n */\nexport default function backwardScanner(text: string, start = 0): BackwardScanner {\n    return { text, start, pos: text.length };\n}\n\n/**\n * Check if given scanner position is at start of scanned text\n */\nexport function sol(scanner: BackwardScanner) {\n    return scanner.pos === scanner.start;\n}\n\n/**\n * “Peeks” character code an current scanner location without advancing it\n */\nexport function peek(scanner: BackwardScanner, offset = 0) {\n    return scanner.text.charCodeAt(scanner.pos - 1 + offset);\n}\n\n/**\n * Returns current character code and moves character location one symbol back\n */\nexport function previous(scanner: BackwardScanner) {\n    if (!sol(scanner)) {\n        return scanner.text.charCodeAt(--scanner.pos);\n    }\n}\n\n/**\n * Consumes current character code if it matches given `match` code or function\n */\nexport function consume(scanner: BackwardScanner, match: Match): boolean {\n    if (sol(scanner)) {\n        return false;\n    }\n\n    const ok = typeof match === 'function'\n        ? match(peek(scanner))\n        : match === peek(scanner);\n\n    if (ok) {\n        scanner.pos--;\n    }\n\n    return !!ok;\n}\n\nexport function consumeWhile(scanner: BackwardScanner, match: Match): boolean {\n    const start = scanner.pos;\n    while (consume(scanner, match)) {\n        // empty\n    }\n    return scanner.pos < start;\n}\n","import { BackwardScanner, previous, sol, peek } from './reader';\n\nconst enum Chars {\n    SingleQuote = 39,\n    DoubleQuote = 34,\n    Escape = 92\n}\n\n/**\n * Check if given character code is a quote\n */\nexport function isQuote(c?: number) {\n    return c === Chars.SingleQuote || c === Chars.DoubleQuote;\n}\n\n/**\n * Consumes quoted value, if possible\n * @return Returns `true` is value was consumed\n */\nexport function consumeQuoted(scanner: BackwardScanner): boolean {\n    const start = scanner.pos;\n    const quote = previous(scanner);\n\n    if (isQuote(quote)) {\n        while (!sol(scanner)) {\n            if (previous(scanner) === quote && peek(scanner) !== Chars.Escape) {\n                return true;\n            }\n        }\n    }\n\n    scanner.pos = start;\n    return false;\n}\n","export const enum Brackets {\n    SquareL = 91,\n    SquareR = 93,\n    RoundL = 40,\n    RoundR = 41,\n    CurlyL = 123,\n    CurlyR = 125,\n}\n\nexport const bracePairs = {\n    [Brackets.SquareL]: Brackets.SquareR,\n    [Brackets.RoundL]: Brackets.RoundR,\n    [Brackets.CurlyL]: Brackets.CurlyR,\n};\n","import { isQuote, consumeQuoted } from './quotes';\nimport { BackwardScanner, consume, sol, consumeWhile, peek } from './reader';\nimport { Brackets, bracePairs } from './brackets';\n\nconst enum Chars {\n    Tab = 9,\n    Space = 32,\n    /** `-` character */\n    Dash = 45,\n    /** `/` character */\n    Slash = 47,\n    /** `:` character */\n    Colon = 58,\n    /** `=` character */\n    Equals = 61,\n    /** `<` character */\n    AngleLeft = 60,\n    /** `>` character */\n    AngleRight = 62,\n}\n\n/**\n * Check if given reader’s current position points at the end of HTML tag\n */\nexport default function isHtml(scanner: BackwardScanner): boolean {\n    const start = scanner.pos;\n\n    if (!consume(scanner, Chars.AngleRight)) {\n        return false;\n    }\n\n    let ok = false;\n    consume(scanner, Chars.Slash); // possibly self-closed element\n\n    while (!sol(scanner)) {\n        consumeWhile(scanner, isWhiteSpace);\n\n        if (consumeIdent(scanner)) {\n            // ate identifier: could be a tag name, boolean attribute or unquoted\n            // attribute value\n            if (consume(scanner, Chars.Slash)) {\n                // either closing tag or invalid tag\n                ok = consume(scanner, Chars.AngleLeft);\n                break;\n            } else if (consume(scanner, Chars.AngleLeft)) {\n                // opening tag\n                ok = true;\n                break;\n            } else if (consume(scanner, isWhiteSpace)) {\n                // boolean attribute\n                continue;\n            } else if (consume(scanner, Chars.Equals)) {\n                // simple unquoted value or invalid attribute\n                if (consumeIdent(scanner)) {\n                    continue;\n                }\n                break;\n            } else if (consumeAttributeWithUnquotedValue(scanner)) {\n                // identifier was a part of unquoted value\n                ok = true;\n                break;\n            }\n\n            // invalid tag\n            break;\n        }\n\n        if (consumeAttribute(scanner)) {\n            continue;\n        }\n\n        break;\n    }\n\n    scanner.pos = start;\n    return ok;\n}\n\n/**\n * Consumes HTML attribute from given string.\n * @return `true` if attribute was consumed.\n */\nfunction consumeAttribute(scanner: BackwardScanner): boolean {\n    return consumeAttributeWithQuotedValue(scanner) || consumeAttributeWithUnquotedValue(scanner);\n}\n\nfunction consumeAttributeWithQuotedValue(scanner: BackwardScanner): boolean {\n    const start = scanner.pos;\n    if (consumeQuoted(scanner) && consume(scanner, Chars.Equals) && consumeIdent(scanner)) {\n        return true;\n    }\n\n    scanner.pos = start;\n    return false;\n}\n\nfunction consumeAttributeWithUnquotedValue(scanner: BackwardScanner): boolean {\n    const start = scanner.pos;\n    const stack: Brackets[] = [];\n    while (!sol(scanner)) {\n        const ch = peek(scanner);\n        if (isCloseBracket(ch)) {\n            stack.push(ch);\n        } else if (isOpenBracket(ch)) {\n            if (stack.pop() !== bracePairs[ch]) {\n                // Unexpected open bracket\n                break;\n            }\n        } else if (!isUnquotedValue(ch)) {\n            break;\n        }\n        scanner.pos--;\n    }\n\n    if (start !== scanner.pos && consume(scanner, Chars.Equals) && consumeIdent(scanner)) {\n        return true;\n    }\n\n    scanner.pos = start;\n    return false;\n}\n\n/**\n * Consumes HTML identifier from stream\n */\nfunction consumeIdent(scanner: BackwardScanner): boolean {\n    return consumeWhile(scanner, isIdent);\n}\n\n/**\n * Check if given character code belongs to HTML identifier\n */\nfunction isIdent(ch: number): boolean {\n    return ch === Chars.Colon || ch === Chars.Dash || isAlpha(ch) || isNumber(ch);\n}\n\n/**\n * Check if given character code is alpha code (letter though A to Z)\n */\nfunction isAlpha(ch: number): boolean {\n    ch &= ~32; // quick hack to convert any char code to uppercase char code\n    return ch >= 65 && ch <= 90; // A-Z\n}\n\n/**\n * Check if given code is a number\n */\nfunction isNumber(ch: number): boolean {\n    return ch > 47 && ch < 58;\n}\n\n/**\n * Check if given code is a whitespace\n */\nfunction isWhiteSpace(ch: number): boolean {\n    return ch === Chars.Space || ch === Chars.Tab;\n}\n\n/**\n * Check if given code may belong to unquoted attribute value\n */\nfunction isUnquotedValue(ch: number): boolean {\n    return !isNaN(ch) && ch !== Chars.Equals && !isWhiteSpace(ch) && !isQuote(ch);\n}\n\nfunction isOpenBracket(ch: number): boolean {\n    return ch === Brackets.CurlyL || ch === Brackets.RoundL || ch === Brackets.SquareL;\n}\n\nfunction isCloseBracket(ch: number): boolean {\n    return ch === Brackets.CurlyR || ch === Brackets.RoundR || ch === Brackets.SquareR;\n}\n","import { SyntaxType } from '../config';\nimport backwardScanner, { sol, peek, BackwardScanner, consume } from './reader';\nimport isAtHTMLTag from './is-html';\nimport { isQuote } from './quotes';\nimport { Brackets, bracePairs } from './brackets';\n\nexport interface ExtractOptions {\n    /**\n     * Allow parser to look ahead of `pos` index for searching of missing\n     * abbreviation parts. Most editors automatically inserts closing braces for\n     * `[`, `{` and `(`, which will most likely be right after current caret position.\n     * So in order to properly expand abbreviation, user must explicitly move\n     * caret right after auto-inserted braces. With this option enabled, parser\n     * will search for closing braces right after `pos`. Default is `true`\n     */\n    lookAhead: boolean;\n\n    /**\n     * Type of context syntax of expanded abbreviation.\n     * In 'stylesheet' syntax, brackets `[]` and `{}` are not supported thus\n     * not extracted.\n     */\n    type: SyntaxType;\n\n    /**\n     * A string that should precede abbreviation in order to make it successfully\n     * extracted. If given, the abbreviation will be extracted from the nearest\n     * `prefix` occurrence.\n     */\n    prefix: string;\n}\n\nexport interface ExtractedAbbreviation {\n    /** Extracted abbreviation */\n    abbreviation: string;\n\n    /** Location of abbreviation in input string */\n    location: number;\n\n    /** Start location of matched abbreviation, including prefix */\n    start: number;\n\n    /** End location of extracted abbreviation */\n    end: number;\n}\n\nconst code = (ch: string) => ch.charCodeAt(0);\nconst specialChars = '#.*:$-_!@%^+>/'.split('').map(code);\n\nconst defaultOptions: ExtractOptions = {\n    type: 'markup',\n    lookAhead: true,\n    prefix: ''\n};\n\n/**\n * Extracts Emmet abbreviation from given string.\n * The goal of this module is to extract abbreviation from current editor’s line,\n * e.g. like this: `<span>.foo[title=bar|]</span>` -> `.foo[title=bar]`, where\n * `|` is a current caret position.\n * @param line A text line where abbreviation should be expanded\n * @param pos Caret position in line. If not given, uses end of line\n * @param options Extracting options\n */\nexport default function extractAbbreviation(line: string, pos: number = line.length, options: Partial<ExtractOptions> = {}): ExtractedAbbreviation | undefined {\n    // make sure `pos` is within line range\n    const opt: ExtractOptions = { ...defaultOptions, ...options };\n    pos = Math.min(line.length, Math.max(0, pos == null ? line.length : pos));\n\n    if (opt.lookAhead) {\n        pos = offsetPastAutoClosed(line, pos, opt);\n    }\n\n    let ch: number;\n    const start = getStartOffset(line, pos, opt.prefix || '');\n    if (start === -1) {\n        return void 0;\n    }\n\n    const scanner = backwardScanner(line, start);\n    scanner.pos = pos;\n    const stack: number[] = [];\n\n    while (!sol(scanner)) {\n        ch = peek(scanner);\n\n        if (stack.includes(Brackets.CurlyR)) {\n            if (ch === Brackets.CurlyR) {\n                stack.push(ch);\n                scanner.pos--;\n                continue;\n            }\n\n            if (ch !== Brackets.CurlyL) {\n                scanner.pos--;\n                continue;\n            }\n        }\n\n        if (isCloseBrace(ch, opt.type)) {\n            stack.push(ch);\n        } else if (isOpenBrace(ch, opt.type)) {\n            if (stack.pop() !== bracePairs[ch]) {\n                // unexpected brace\n                break;\n            }\n        } else if (stack.includes(Brackets.SquareR) || stack.includes(Brackets.CurlyR)) {\n            // respect all characters inside attribute sets or text nodes\n            scanner.pos--;\n            continue;\n        } else if (isAtHTMLTag(scanner) || !isAbbreviation(ch)) {\n            break;\n        }\n\n        scanner.pos--;\n    }\n\n    if (!stack.length && scanner.pos !== pos) {\n        // Found something, remove some invalid symbols from the\n        // beginning and return abbreviation\n        const abbreviation = line.slice(scanner.pos, pos).replace(/^[*+>^]+/, '');\n        return {\n            abbreviation,\n            location: pos - abbreviation.length,\n            start: options.prefix\n                ? start - options.prefix.length\n                : pos - abbreviation.length,\n            end: pos\n        };\n    }\n}\n\n/**\n * Returns new `line` index which is right after characters beyound `pos` that\n * editor will likely automatically close, e.g. }, ], and quotes\n */\nfunction offsetPastAutoClosed(line: string, pos: number, options: ExtractOptions): number {\n    // closing quote is allowed only as a next character\n    if (isQuote(line.charCodeAt(pos))) {\n        pos++;\n    }\n\n    // offset pointer until non-autoclosed character is found\n    while (isCloseBrace(line.charCodeAt(pos), options.type)) {\n        pos++;\n    }\n\n    return pos;\n}\n\n/**\n * Returns start offset (left limit) in `line` where we should stop looking for\n * abbreviation: it’s nearest to `pos` location of `prefix` token\n */\nfunction getStartOffset(line: string, pos: number, prefix: string): number {\n    if (!prefix) {\n        return 0;\n    }\n\n    const scanner = backwardScanner(line);\n    const compiledPrefix = prefix.split('').map(code);\n    scanner.pos = pos;\n    let result: number;\n\n    while (!sol(scanner)) {\n        if (consumePair(scanner, Brackets.SquareR, Brackets.SquareL) || consumePair(scanner, Brackets.CurlyR, Brackets.CurlyL)) {\n            continue;\n        }\n\n        result = scanner.pos;\n        if (consumeArray(scanner, compiledPrefix)) {\n            return result;\n        }\n\n        scanner.pos--;\n    }\n\n    return -1;\n}\n\n/**\n * Consumes full character pair, if possible\n */\nfunction consumePair(scanner: BackwardScanner, close: number, open: number): boolean {\n    const start = scanner.pos;\n    if (consume(scanner, close)) {\n        while (!sol(scanner)) {\n            if (consume(scanner, open)) {\n                return true;\n            }\n\n            scanner.pos--;\n        }\n    }\n\n    scanner.pos = start;\n    return false;\n}\n\n/**\n * Consumes all character codes from given array, right-to-left, if possible\n */\nfunction consumeArray(scanner: BackwardScanner, arr: number[]) {\n    const start = scanner.pos;\n    let consumed = false;\n\n    for (let i = arr.length - 1; i >= 0 && !sol(scanner); i--) {\n        if (!consume(scanner, arr[i])) {\n            break;\n        }\n\n        consumed = i === 0;\n    }\n\n    if (!consumed) {\n        scanner.pos = start;\n    }\n\n    return consumed;\n}\n\nfunction isAbbreviation(ch: number) {\n    return (ch > 64 && ch < 91)   // uppercase letter\n        || (ch > 96 && ch < 123)  // lowercase letter\n        || (ch > 47 && ch < 58)   // number\n        || specialChars.includes(ch); // special character\n}\n\nfunction isOpenBrace(ch: number, syntax: SyntaxType) {\n    return ch === Brackets.RoundL || (syntax === 'markup' && (ch === Brackets.SquareL || ch === Brackets.CurlyL));\n}\n\nfunction isCloseBrace(ch: number, syntax: SyntaxType) {\n    return ch === Brackets.RoundR || (syntax === 'markup' && (ch === Brackets.SquareR || ch === Brackets.CurlyR));\n}\n","import markupAbbreviation, { Abbreviation } from '@emmetio/abbreviation';\nimport stylesheetAbbreviation, { CSSAbbreviation } from '@emmetio/css-abbreviation';\nimport parseMarkup, { stringify as stringifyMarkup } from './markup';\nimport parseStylesheet, {\n    stringify as stringifyStylesheet,\n    convertSnippets as parseStylesheetSnippets,\n    CSSAbbreviationScope\n} from './stylesheet';\nimport resolveConfig, { UserConfig, Config } from './config';\n\nexport default function expandAbbreviation(abbr: string, config?: UserConfig): string {\n    const resolvedConfig = resolveConfig(config);\n    return resolvedConfig.type === 'stylesheet'\n        ? stylesheet(abbr, resolvedConfig)\n        : markup(abbr, resolvedConfig);\n}\n\n/**\n * Expands given *markup* abbreviation (e.g. regular Emmet abbreviation that\n * produces structured output like HTML) and outputs it according to options\n * provided in config\n */\nexport function markup(abbr: string | Abbreviation, config: Config) {\n    return stringifyMarkup(parseMarkup(abbr, config), config);\n}\n\n/**\n * Expands given *stylesheet* abbreviation (a special Emmet abbreviation designed for\n * stylesheet languages like CSS, SASS etc.) and outputs it according to options\n * provided in config\n */\nexport function stylesheet(abbr: string | CSSAbbreviation, config: Config) {\n    return stringifyStylesheet(parseStylesheet(abbr, config), config);\n}\n\nexport {\n    markupAbbreviation, parseMarkup, stringifyMarkup,\n    stylesheetAbbreviation, parseStylesheet, stringifyStylesheet, parseStylesheetSnippets,\n    Abbreviation as MarkupAbbreviation, CSSAbbreviation as StylesheetAbbreviation,\n    CSSAbbreviationScope\n};\nexport { default as extract, ExtractOptions, ExtractedAbbreviation } from './extract-abbreviation';\nexport { GlobalConfig, SyntaxType, Config, UserConfig, Options, AbbreviationContext, default as resolveConfig } from './config';\n"],"names":["parse","walk","splitByLines","element","shouldFormat","abbreviation","snippets","attributes","calculateScore","peek","defaultOptions","isAtHTMLTag","stringifyMarkup","parseMarkup","stringifyStylesheet","parseStylesheet"],"mappings":"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"}