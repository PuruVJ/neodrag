{"version":3,"file":"scanner.es.js","sources":["src/utils.ts","src/index.ts"],"sourcesContent":["import Scanner from './index';\n\ninterface QuotedOptions {\n    /** A character code of quote-escape symbol */\n    escape?: number;\n\n    /** Throw error if quotes string can’t be properly consumed */\n    throws?: boolean;\n}\n\nconst defaultQuotedOptions: QuotedOptions = {\n    escape: 92,   // \\ character\n    throws: false\n};\n\n/**\n * Check if given code is a number\n */\nexport function isNumber(code: number): boolean {\n    return code > 47 && code < 58;\n}\n\n/**\n * Check if given character code is alpha code (letter through A to Z)\n */\nexport function isAlpha(code: number, from?: number, to?: number): boolean {\n    from = from || 65; // A\n    to = to || 90; // Z\n    code &= ~32; // quick hack to convert any char code to uppercase char code\n\n    return code >= from && code <= to;\n}\n\n/**\n * Check if given character code is alpha-numeric (letter through A to Z or number)\n */\nexport function isAlphaNumeric(code: number): boolean {\n    return isNumber(code) || isAlpha(code);\n}\n\nexport function isAlphaNumericWord(code: number): boolean {\n    return isNumber(code) || isAlphaWord(code);\n}\n\nexport function isAlphaWord(code: number): boolean {\n    return code === 95 /* _ */ || isAlpha(code);\n}\n\n/**\n * Check if given character code is a white-space character: a space character\n * or line breaks\n */\nexport function isWhiteSpace(code: number) {\n    return code === 32   /* space */\n        || code === 9    /* tab */\n        || code === 160; /* non-breaking space */\n}\n\n/**\n * Check if given character code is a space character\n */\nexport function isSpace(code: number): boolean {\n    return isWhiteSpace(code)\n        || code === 10  /* LF */\n        || code === 13; /* CR */\n}\n\n/**\n * Consumes 'single' or \"double\"-quoted string from given string, if possible\n * @return `true` if quoted string was consumed. The contents of quoted string\n * will be available as `stream.current()`\n */\nexport function eatQuoted(stream: Scanner, options?: QuotedOptions): boolean {\n    options = { ...defaultQuotedOptions, ...options };\n    const start = stream.pos;\n    const quote = stream.peek();\n\n    if (stream.eat(isQuote)) {\n        while (!stream.eof()) {\n            switch (stream.next()) {\n                case quote:\n                    stream.start = start;\n                    return true;\n\n                case options.escape:\n                    stream.next();\n                    break;\n            }\n        }\n\n        // If we’re here then stream wasn’t properly consumed.\n        // Revert stream and decide what to do\n        stream.pos = start;\n\n        if (options.throws) {\n            throw stream.error('Unable to consume quoted string');\n        }\n    }\n\n    return false;\n}\n\n/**\n * Check if given character code is a quote character\n */\nexport function isQuote(code: number): boolean {\n    return code === 39 /* ' */ || code === 34 /* \" */;\n}\n\n/**\n * Eats paired characters substring, for example `(foo)` or `[bar]`\n * @param open Character code of pair opening\n * @param close Character code of pair closing\n * @return Returns `true` if character pair was successfully consumed, it’s\n * content will be available as `stream.current()`\n */\nexport function eatPair(stream: Scanner, open: number, close: number, options?: QuotedOptions): boolean {\n    options = { ...defaultQuotedOptions, ...options };\n    const start = stream.pos;\n\n    if (stream.eat(open)) {\n        let stack = 1;\n        let ch: number;\n\n        while (!stream.eof()) {\n            if (eatQuoted(stream, options)) {\n                continue;\n            }\n\n            ch = stream.next()!;\n            if (ch === open) {\n                stack++;\n            } else if (ch === close) {\n                stack--;\n                if (!stack) {\n                    stream.start = start;\n                    return true;\n                }\n            } else if (ch === options.escape) {\n                stream.next();\n            }\n        }\n\n        // If we’re here then paired character can’t be consumed\n        stream.pos = start;\n\n        if (options.throws) {\n            throw stream.error(`Unable to find matching pair for ${String.fromCharCode(open)}`);\n        }\n    }\n\n    return false;\n}\n","type MatchFn = (ch: number) => boolean;\n\n/**\n * A streaming, character code-based string reader\n */\nexport default class Scanner {\n    /** Current string */\n    string: string;\n\n    /** Current scanner position */\n    pos: number;\n    /** Lower range limit where string reader is available */\n    start: number;\n\n    /** Upper range limit where string reader is available */\n    end: number;\n\n    constructor(str: string, start?: number, end?: number) {\n        if (end == null && typeof str === 'string') {\n            end = str.length;\n        }\n\n        this.string = str;\n        this.pos = this.start = start || 0;\n        this.end = end || 0;\n    }\n\n    /**\n     * Returns true only if the stream is at the end of the file.\n     */\n    eof(): boolean {\n        return this.pos >= this.end;\n    }\n\n    /**\n     * Creates a new stream instance which is limited to given `start` and `end`\n     * range. E.g. its `eof()` method will look at `end` property, not actual\n     * stream end\n     */\n    limit(start?: number, end?: number): Scanner {\n        return new Scanner(this.string, start, end);\n    }\n\n    /**\n     * Returns the next character code in the stream without advancing it.\n     * Will return NaN at the end of the file.\n     */\n    peek(): number {\n        return this.string.charCodeAt(this.pos);\n    }\n\n    /**\n     * Returns the next character in the stream and advances it.\n     * Also returns <code>undefined</code> when no more characters are available.\n     */\n    next(): number | undefined {\n        if (this.pos < this.string.length) {\n            return this.string.charCodeAt(this.pos++);\n        }\n    }\n\n    /**\n     * `match` can be a character code or a function that takes a character code\n     * and returns a boolean. If the next character in the stream 'matches'\n     * the given argument, it is consumed and returned.\n     * Otherwise, `false` is returned.\n     */\n    eat(match: number | MatchFn): boolean {\n        const ch = this.peek();\n        const ok = typeof match === 'function' ? match(ch) : ch === match;\n\n        if (ok) {\n            this.next();\n        }\n\n        return ok;\n    }\n\n    /**\n     * Repeatedly calls <code>eat</code> with the given argument, until it\n     * fails. Returns <code>true</code> if any characters were eaten.\n     */\n    eatWhile(match: number | MatchFn): boolean {\n        const start = this.pos;\n        while (!this.eof() && this.eat(match)) { /* */ }\n        return this.pos !== start;\n    }\n\n    /**\n     * Backs up the stream n characters. Backing it up further than the\n     * start of the current token will cause things to break, so be careful.\n     */\n    backUp(n: number) {\n        this.pos -= (n || 1);\n    }\n\n    /**\n     * Get the string between the start of the current token and the\n     * current stream position.\n     */\n    current(): string {\n        return this.substring(this.start, this.pos);\n    }\n\n    /**\n     * Returns substring for given range\n     */\n    substring(start: number, end?: number): string {\n        return this.string.slice(start, end);\n    }\n\n    /**\n     * Creates error object with current stream state\n     */\n    error(message: string, pos = this.pos): ScannerError {\n        return new ScannerError(`${message} at ${pos + 1}`, pos, this.string);\n    }\n}\n\nexport class ScannerError extends Error {\n    pos: number;\n    string: string;\n\n    constructor(message: string, pos: number, str: string) {\n        super(message);\n        this.pos = pos;\n        this.string = str;\n    }\n}\n\nexport * from './utils';\n"],"names":[],"mappings":"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"}