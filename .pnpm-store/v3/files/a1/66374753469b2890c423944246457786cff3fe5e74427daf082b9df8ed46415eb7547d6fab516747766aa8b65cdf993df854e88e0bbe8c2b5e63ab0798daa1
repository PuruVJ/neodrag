{"version":3,"names":["buildPrivateNamesMap","props","privateNamesMap","Map","prop","isPrivate","name","node","key","id","update","has","get","scope","generateUidIdentifier","static","method","isProperty","isClassPrivateMethod","kind","getId","setId","methodId","set","buildPrivateNamesNodes","privateFieldsAsProperties","state","initNodes","value","isStatic","isMethod","isAccessor","t","cloneNode","init","callExpression","addHelper","stringLiteral","newExpression","identifier","annotateAsPure","push","template","statement","ast","privateNameVisitorFactory","visitor","nestedVisitor","traverse","visitors","merge","environmentVisitor","privateNameVisitor","Class","path","body","visiblePrivateNames","redeclared","delete","length","skipKey","PrivateName","noDocumentAll","parentPath","isMemberExpression","property","isOptionalMemberExpression","includes","handle","unshadow","innerBinding","hasBinding","bindingIdentifierEquals","rename","parent","buildCheckInRHS","rhs","file","inRHSIsObject","availableHelper","privateInVisitor","BinaryExpression","operator","left","right","isPrivateName","classRef","replaceWith","expression","privateNameHandlerSpec","memoise","member","count","object","memo","maybeGenerateMemoised","memoiser","receiver","helperName","sequenceExpression","console","warn","boundGet","memberExpression","destructureSet","helper","Error","call","args","optimiseCall","optionalCall","privateNameHandlerLoose","BASE","REF","PROP","simpleSet","optionalCallExpression","transformPrivateNamesUsage","ref","size","handler","memberExpressionToFunctions","buildPrivateFieldInitLoose","buildUndefinedNode","buildPrivateInstanceFieldInitSpec","thisExpression","buildPrivateStaticFieldInitSpec","privateName","initAdded","buildPrivateMethodInitLoose","buildPrivateInstanceMethodInitSpec","buildPrivateAccessorInitialization","buildPrivateInstanceMethodInitalization","buildPublicFieldInitLoose","computed","expressionStatement","assignmentExpression","isLiteral","buildPublicFieldInitSpec","buildPrivateStaticMethodInitLoose","buildPrivateMethodDeclaration","getterDeclared","setterDeclared","params","generator","async","isGetter","isSetter","declId","functionDeclaration","thisContextVisitor","ThisExpression","needsClassRef","MetaProperty","meta","isIdentifier","innerReferencesVisitor","ReferencedIdentifier","replaceThisContext","getSuperRef","isStaticBlock","constantSuper","innerBindingRef","replacer","ReplaceSupers","methodPath","refToPreserve","getObjectRef","replace","isNameOrLength","type","buildFieldsInitNodes","superRef","setPublicClassFields","injectSuperRef","staticNodes","instanceNodes","pureStaticNodes","generateUidIdentifierBasedOnNode","isClassProperty","ts","assertFieldTransformed","isInstance","isPublic","isField","replaced","blockBody","isExpressionStatement","unshift","filter","Boolean","wrapClass","remove","superClass","isClassExpression"],"sources":["../src/fields.ts"],"sourcesContent":["import { template, traverse, types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport memberExpressionToFunctions from \"@babel/helper-member-expression-to-functions\";\nimport type {\n  Handler,\n  HandlerState,\n} from \"@babel/helper-member-expression-to-functions\";\nimport optimiseCall from \"@babel/helper-optimise-call-expression\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\n\nimport * as ts from \"./typescript\";\n\ninterface PrivateNameMetadata {\n  id: t.Identifier;\n  static: boolean;\n  method: boolean;\n  getId?: t.Identifier;\n  setId?: t.Identifier;\n  methodId?: t.Identifier;\n  initAdded?: boolean;\n  getterDeclared?: boolean;\n  setterDeclared?: boolean;\n}\n\ntype PrivateNamesMap = Map<string, PrivateNameMetadata>;\n\nexport function buildPrivateNamesMap(props: PropPath[]) {\n  const privateNamesMap: PrivateNamesMap = new Map();\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const { name } = prop.node.key.id;\n      const update: PrivateNameMetadata = privateNamesMap.has(name)\n        ? privateNamesMap.get(name)\n        : {\n            id: prop.scope.generateUidIdentifier(name),\n            static: prop.node.static,\n            method: !prop.isProperty(),\n          };\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n        } else if (prop.node.kind === \"set\") {\n          update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n      privateNamesMap.set(name, update);\n    }\n  }\n  return privateNamesMap;\n}\n\nexport function buildPrivateNamesNodes(\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties: boolean,\n  state: File,\n) {\n  const initNodes: t.Statement[] = [];\n\n  for (const [name, value] of privateNamesMap) {\n    // When the privateFieldsAsProperties assumption is enabled,\n    // both static and instance fields are transpiled using a\n    // secret non-enumerable property. Hence, we also need to generate that\n    // key (using the classPrivateFieldLooseKey helper).\n    // In spec mode, only instance fields need a \"private name\" initializer\n    // because static fields are directly assigned to a variable in the\n    // buildPrivateStaticFieldInitSpec function.\n    const { static: isStatic, method: isMethod, getId, setId } = value;\n    const isAccessor = getId || setId;\n    const id = t.cloneNode(value.id);\n\n    let init: t.Expression;\n\n    if (privateFieldsAsProperties) {\n      init = t.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [\n        t.stringLiteral(name),\n      ]);\n    } else if (!isStatic) {\n      init = t.newExpression(\n        t.identifier(!isMethod || isAccessor ? \"WeakMap\" : \"WeakSet\"),\n        [],\n      );\n    }\n\n    if (init) {\n      annotateAsPure(init);\n      initNodes.push(template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n\n  return initNodes;\n}\n\ninterface PrivateNameVisitorState {\n  privateNamesMap: PrivateNamesMap;\n  privateFieldsAsProperties: boolean;\n  redeclared?: string[];\n}\n\n// Traverses the class scope, handling private name references. If an inner\n// class redeclares the same private name, it will hand off traversal to the\n// restricted visitor (which doesn't traverse the inner class's inner scope).\nfunction privateNameVisitorFactory<S>(\n  visitor: Visitor<PrivateNameVisitorState & S>,\n) {\n  // Traverses the outer portion of a class, without touching the class's inner\n  // scope, for private names.\n  const nestedVisitor = traverse.visitors.merge([\n    {\n      ...visitor,\n    },\n    environmentVisitor,\n  ]);\n\n  const privateNameVisitor: Visitor<PrivateNameVisitorState & S> = {\n    ...visitor,\n\n    Class(path) {\n      const { privateNamesMap } = this;\n      const body = path.get(\"body.body\");\n\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const { name } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n\n      // If the class doesn't redeclare any private fields, we can continue with\n      // our overall traversal.\n      if (!redeclared.length) {\n        return;\n      }\n\n      // This class redeclares some private field. We need to process the outer\n      // environment with access to all the outer privates, then we can process\n      // the inner environment with only the still-visible outer privates.\n      path.get(\"body\").traverse(nestedVisitor, {\n        ...this,\n        redeclared,\n      });\n      path.traverse(privateNameVisitor, {\n        ...this,\n        privateNamesMap: visiblePrivateNames,\n      });\n\n      // We'll eventually hit this class node again with the overall Class\n      // Features visitor, which'll process the redeclared privates.\n      path.skipKey(\"body\");\n    },\n  };\n\n  return privateNameVisitor;\n}\n\ninterface PrivateNameState {\n  privateNamesMap: PrivateNamesMap;\n  classRef: t.Identifier;\n  file: File;\n  noDocumentAll: boolean;\n  innerBinding?: t.Identifier;\n}\n\nconst privateNameVisitor = privateNameVisitorFactory<\n  HandlerState<PrivateNameState> & PrivateNameState\n>({\n  PrivateName(path, { noDocumentAll }) {\n    const { privateNamesMap, redeclared } = this;\n    const { node, parentPath } = path;\n\n    if (\n      !parentPath.isMemberExpression({ property: node }) &&\n      !parentPath.isOptionalMemberExpression({ property: node })\n    ) {\n      return;\n    }\n    const { name } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    this.handle(parentPath, noDocumentAll);\n  },\n});\n\n// rename all bindings that shadows innerBinding\nfunction unshadow(\n  name: string,\n  scope: Scope,\n  innerBinding: t.Identifier | undefined,\n) {\n  // in some cases, scope.getBinding(name) === undefined\n  // so we check hasBinding to avoid keeping looping\n  // see: https://github.com/babel/babel/pull/13656#discussion_r686030715\n  while (\n    scope?.hasBinding(name) &&\n    !scope.bindingIdentifierEquals(name, innerBinding)\n  ) {\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\n\nexport function buildCheckInRHS(\n  rhs: t.Expression,\n  file: File,\n  inRHSIsObject?: boolean,\n) {\n  if (inRHSIsObject || !file.availableHelper?.(\"checkInRHS\")) return rhs;\n  return t.callExpression(file.addHelper(\"checkInRHS\"), [rhs]);\n}\n\nconst privateInVisitor = privateNameVisitorFactory<{\n  classRef: t.Identifier;\n  file: File;\n  innerBinding?: t.Identifier;\n}>({\n  BinaryExpression(path, { file }) {\n    const { operator, left, right } = path.node;\n    if (operator !== \"in\") return;\n    if (!t.isPrivateName(left)) return;\n\n    const { privateFieldsAsProperties, privateNamesMap, redeclared } = this;\n\n    const { name } = left.id;\n\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    // if there are any local variable shadowing classRef, unshadow it\n    // see #12960\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n\n    if (privateFieldsAsProperties) {\n      const { id } = privateNamesMap.get(name);\n      path.replaceWith(template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(\n          right,\n          file,\n        )}, ${t.cloneNode(id)})\n      `);\n      return;\n    }\n\n    const { id, static: isStatic } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      path.replaceWith(\n        template.expression.ast`${buildCheckInRHS(\n          right,\n          file,\n        )} === ${t.cloneNode(this.classRef)}`,\n      );\n      return;\n    }\n\n    path.replaceWith(\n      template.expression.ast`${t.cloneNode(id)}.has(${buildCheckInRHS(\n        right,\n        file,\n      )})`,\n    );\n  },\n});\n\ninterface Receiver {\n  receiver(\n    this: HandlerState<PrivateNameState> & PrivateNameState,\n    member: NodePath<t.MemberExpression | t.OptionalMemberExpression>,\n  ): t.Expression;\n}\n\nconst privateNameHandlerSpec: Handler<PrivateNameState & Receiver> & Receiver =\n  {\n    memoise(member, count) {\n      const { scope } = member;\n      const { object } = member.node as { object: t.Expression };\n\n      const memo = scope.maybeGenerateMemoised(object);\n      if (!memo) {\n        return;\n      }\n\n      this.memoiser.set(object, memo, count);\n    },\n\n    receiver(member) {\n      const { object } = member.node as { object: t.Expression };\n\n      if (this.memoiser.has(object)) {\n        return t.cloneNode(this.memoiser.get(object));\n      }\n\n      return t.cloneNode(object);\n    },\n\n    get(member) {\n      const { classRef, privateNamesMap, file, innerBinding } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        methodId,\n        getId,\n        setId,\n      } = privateNamesMap.get(name);\n      const isAccessor = getId || setId;\n\n      if (isStatic) {\n        const helperName =\n          isMethod && !isAccessor\n            ? \"classStaticPrivateMethodGet\"\n            : \"classStaticPrivateFieldSpecGet\";\n\n        // if there are any local variable shadowing classRef, unshadow it\n        // see #12960\n        unshadow(classRef.name, member.scope, innerBinding);\n\n        return t.callExpression(file.addHelper(helperName), [\n          this.receiver(member),\n          t.cloneNode(classRef),\n          t.cloneNode(id),\n        ]);\n      }\n\n      if (isMethod) {\n        if (isAccessor) {\n          if (!getId && setId) {\n            if (file.availableHelper(\"writeOnlyError\")) {\n              return t.sequenceExpression([\n                this.receiver(member),\n                t.callExpression(file.addHelper(\"writeOnlyError\"), [\n                  t.stringLiteral(`#${name}`),\n                ]),\n              ]);\n            }\n            console.warn(\n              `@babel/helpers is outdated, update it to silence this warning.`,\n            );\n          }\n          return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n          ]);\n        }\n        return t.callExpression(file.addHelper(\"classPrivateMethodGet\"), [\n          this.receiver(member),\n          t.cloneNode(id),\n          t.cloneNode(methodId),\n        ]);\n      }\n      return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n      ]);\n    },\n\n    boundGet(member) {\n      this.memoise(member, 1);\n\n      return t.callExpression(\n        t.memberExpression(this.get(member), t.identifier(\"bind\")),\n        [this.receiver(member)],\n      );\n    },\n\n    set(member, value) {\n      const { classRef, privateNamesMap, file } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n        getId,\n      } = privateNamesMap.get(name);\n      const isAccessor = getId || setId;\n\n      if (isStatic) {\n        const helperName =\n          isMethod && !isAccessor\n            ? \"classStaticPrivateMethodSet\"\n            : \"classStaticPrivateFieldSpecSet\";\n\n        return t.callExpression(file.addHelper(helperName), [\n          this.receiver(member),\n          t.cloneNode(classRef),\n          t.cloneNode(id),\n          value,\n        ]);\n      }\n      if (isMethod) {\n        if (setId) {\n          return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n            value,\n          ]);\n        }\n        return t.sequenceExpression([\n          this.receiver(member),\n          value,\n          t.callExpression(file.addHelper(\"readOnlyError\"), [\n            t.stringLiteral(`#${name}`),\n          ]),\n        ]);\n      }\n      return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n        value,\n      ]);\n    },\n\n    destructureSet(member) {\n      const { classRef, privateNamesMap, file } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const { id, static: isStatic } = privateNamesMap.get(name);\n      if (isStatic) {\n        try {\n          // classStaticPrivateFieldDestructureSet was introduced in 7.13.10\n          // eslint-disable-next-line no-var\n          var helper = file.addHelper(\"classStaticPrivateFieldDestructureSet\");\n        } catch {\n          throw new Error(\n            \"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" +\n              \"please update @babel/helpers to the latest version.\",\n          );\n        }\n        return t.memberExpression(\n          t.callExpression(helper, [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n          ]),\n          t.identifier(\"value\"),\n        );\n      }\n\n      return t.memberExpression(\n        t.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [\n          this.receiver(member),\n          t.cloneNode(id),\n        ]),\n        t.identifier(\"value\"),\n      );\n    },\n\n    call(member, args: (t.Expression | t.SpreadElement)[]) {\n      // The first access (the get) should do the memo assignment.\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, false);\n    },\n\n    optionalCall(member, args: (t.Expression | t.SpreadElement)[]) {\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, true);\n    },\n  };\n\nconst privateNameHandlerLoose: Handler<PrivateNameState> = {\n  get(member) {\n    const { privateNamesMap, file } = this;\n    const { object } = member.node;\n    const { name } = (member.node.property as t.PrivateName).id;\n\n    return template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: t.cloneNode(object),\n      PROP: t.cloneNode(privateNamesMap.get(name).id),\n    });\n  },\n\n  set() {\n    // noop\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n\n  boundGet(member) {\n    return t.callExpression(\n      t.memberExpression(this.get(member), t.identifier(\"bind\")),\n      [t.cloneNode(member.node.object as t.Expression)],\n    );\n  },\n\n  simpleSet(member) {\n    return this.get(member);\n  },\n\n  destructureSet(member) {\n    return this.get(member);\n  },\n\n  call(member, args) {\n    return t.callExpression(this.get(member), args);\n  },\n\n  optionalCall(member, args) {\n    return t.optionalCallExpression(this.get(member), args, true);\n  },\n};\n\nexport function transformPrivateNamesUsage(\n  ref: t.Identifier,\n  path: NodePath<t.Class>,\n  privateNamesMap: PrivateNamesMap,\n  {\n    privateFieldsAsProperties,\n    noDocumentAll,\n    innerBinding,\n  }: {\n    privateFieldsAsProperties: boolean;\n    noDocumentAll: boolean;\n    innerBinding: t.Identifier;\n  },\n  state: File,\n) {\n  if (!privateNamesMap.size) return;\n\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties\n    ? privateNameHandlerLoose\n    : privateNameHandlerSpec;\n\n  memberExpressionToFunctions<PrivateNameState>(body, privateNameVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    ...handler,\n    noDocumentAll,\n    innerBinding,\n  });\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding,\n  });\n}\n\nfunction buildPrivateFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return template.statement.ast`\n    Object.defineProperty(${ref}, ${t.cloneNode(id)}, {\n      // configurable is false by default\n      // enumerable is false by default\n      writable: true,\n      value: ${value}\n    });\n  `;\n}\n\nfunction buildPrivateInstanceFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return template.statement.ast`${t.cloneNode(id)}.set(${ref}, {\n        // configurable is always false for private elements\n        // enumerable is always false for private elements\n        writable: true,\n        value: ${value},\n      })`;\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return template.statement.ast`${helper}(\n    ${t.thisExpression()},\n    ${t.cloneNode(id)},\n    {\n      writable: true,\n      value: ${value}\n    },\n  )`;\n}\n\nfunction buildPrivateStaticFieldInitSpec(\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId, initAdded } = privateName;\n  const isAccessor = getId || setId;\n\n  if (!prop.isProperty() && (initAdded || !isAccessor)) return;\n\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return template.statement.ast`\n      var ${t.cloneNode(id)} = {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      }\n    `;\n  }\n\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return template.statement.ast`\n    var ${t.cloneNode(id)} = {\n      // configurable is false by default\n      // enumerable is false by default\n      writable: true,\n      value: ${value}\n    };\n  `;\n}\n\nfunction buildPrivateMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { methodId, id, getId, setId, initAdded } = privateName;\n  if (initAdded) return;\n\n  if (methodId) {\n    return template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      `;\n  }\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      });\n    `;\n  }\n}\n\nfunction buildPrivateInstanceMethodInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    return buildPrivateAccessorInitialization(\n      ref,\n      prop,\n      privateNamesMap,\n      state,\n    );\n  }\n\n  return buildPrivateInstanceMethodInitalization(\n    ref,\n    prop,\n    privateNamesMap,\n    state,\n  );\n}\n\nfunction buildPrivateAccessorInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId } = privateName;\n\n  privateNamesMap.set(prop.node.key.id.name, {\n    ...privateName,\n    initAdded: true,\n  });\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return template.statement.ast`\n      ${id}.set(${ref}, {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      });\n    `;\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return template.statement.ast`${helper}(\n    ${t.thisExpression()},\n    ${t.cloneNode(id)},\n    {\n      get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n      set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n    },\n  )`;\n}\n\nfunction buildPrivateInstanceMethodInitalization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id } = privateName;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return template.statement.ast`${id}.add(${ref})`;\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return template.statement.ast`${helper}(\n    ${t.thisExpression()},\n    ${t.cloneNode(id)}\n  )`;\n}\n\nfunction buildPublicFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return t.expressionStatement(\n    t.assignmentExpression(\n      \"=\",\n      t.memberExpression(ref, key, computed || t.isLiteral(key)),\n      value,\n    ),\n  );\n}\n\nfunction buildPublicFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n  state: File,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return t.expressionStatement(\n    t.callExpression(state.addHelper(\"defineProperty\"), [\n      ref,\n      computed || t.isLiteral(key)\n        ? key\n        : t.stringLiteral((key as t.Identifier).name),\n      value,\n    ]),\n  );\n}\n\nfunction buildPrivateStaticMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  state: File,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, methodId, getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      })\n    `;\n  }\n\n  return template.statement.ast`\n    Object.defineProperty(${ref}, ${id}, {\n      // configurable is false by default\n      // enumerable is false by default\n      // writable is false by default\n      value: ${methodId.name}\n    });\n  `;\n}\n\nfunction buildPrivateMethodDeclaration(\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties = false,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic,\n  } = privateName;\n  const { params, body, generator, async } = prop.node;\n  const isGetter = getId && !getterDeclared && params.length === 0;\n  const isSetter = setId && !setterDeclared && params.length > 0;\n\n  let declId = methodId;\n\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      getterDeclared: true,\n    });\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      setterDeclared: true,\n    });\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsProperties) {\n    declId = id;\n  }\n\n  return t.functionDeclaration(\n    t.cloneNode(declId),\n    // @ts-expect-error params for ClassMethod has TSParameterProperty\n    params,\n    body,\n    generator,\n    async,\n  );\n}\n\ntype ReplaceThisState = {\n  classRef: t.Identifier;\n  needsClassRef: boolean;\n  innerBinding: t.Identifier | null;\n};\n\nconst thisContextVisitor = traverse.visitors.merge<ReplaceThisState>([\n  {\n    ThisExpression(path, state) {\n      state.needsClassRef = true;\n      path.replaceWith(t.cloneNode(state.classRef));\n    },\n    MetaProperty(path) {\n      const meta = path.get(\"meta\");\n      const property = path.get(\"property\");\n      const { scope } = path;\n      // if there are `new.target` in static field\n      // we should replace it with `undefined`\n      if (\n        meta.isIdentifier({ name: \"new\" }) &&\n        property.isIdentifier({ name: \"target\" })\n      ) {\n        path.replaceWith(scope.buildUndefinedNode());\n      }\n    },\n  },\n  environmentVisitor,\n]);\n\nconst innerReferencesVisitor: Visitor<ReplaceThisState> = {\n  ReferencedIdentifier(path, state) {\n    if (\n      path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)\n    ) {\n      state.needsClassRef = true;\n      path.node.name = state.classRef.name;\n    }\n  },\n};\n\nfunction replaceThisContext(\n  path: PropPath,\n  ref: t.Identifier,\n  getSuperRef: () => t.Identifier,\n  file: File,\n  isStaticBlock: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier | null,\n) {\n  const state: ReplaceThisState = {\n    classRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef,\n  };\n\n  const replacer = new ReplaceSupers({\n    methodPath: path,\n    constantSuper,\n    file,\n    refToPreserve: ref,\n    getSuperRef,\n    getObjectRef() {\n      state.needsClassRef = true;\n      // @ts-expect-error: TS doesn't infer that path.node is not a StaticBlock\n      return t.isStaticBlock?.(path.node) || path.node.static\n        ? ref\n        : t.memberExpression(ref, t.identifier(\"prototype\"));\n    },\n  });\n  replacer.replace();\n  if (isStaticBlock || path.isProperty()) {\n    path.traverse(thisContextVisitor, state);\n  }\n\n  // todo: use innerBinding.referencePaths to avoid full traversal\n  if (\n    innerBindingRef != null &&\n    state.classRef?.name &&\n    state.classRef.name !== innerBindingRef?.name\n  ) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n\n  return state.needsClassRef;\n}\n\nexport type PropNode =\n  | t.ClassProperty\n  | t.ClassPrivateMethod\n  | t.ClassPrivateProperty\n  | t.StaticBlock;\nexport type PropPath = NodePath<PropNode>;\n\nfunction isNameOrLength({ key, computed }: t.ClassProperty) {\n  if (key.type === \"Identifier\") {\n    return !computed && (key.name === \"name\" || key.name === \"length\");\n  }\n  if (key.type === \"StringLiteral\") {\n    return key.value === \"name\" || key.value === \"length\";\n  }\n  return false;\n}\n\nexport function buildFieldsInitNodes(\n  ref: t.Identifier,\n  superRef: t.Expression | undefined,\n  props: PropPath[],\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n  setPublicClassFields: boolean,\n  privateFieldsAsProperties: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier,\n) {\n  let needsClassRef = false;\n  let injectSuperRef: t.Identifier;\n  const staticNodes: t.Statement[] = [];\n  const instanceNodes: t.Statement[] = [];\n  // These nodes are pure and can be moved to the closest statement position\n  const pureStaticNodes: t.FunctionDeclaration[] = [];\n\n  const getSuperRef = t.isIdentifier(superRef)\n    ? () => superRef\n    : () => {\n        injectSuperRef ??=\n          props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n        return injectSuperRef;\n      };\n\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n\n    // @ts-expect-error: TS doesn't infer that prop.node is not a StaticBlock\n    const isStatic = !t.isStaticBlock?.(prop.node) && prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock?.();\n\n    if (isStatic || (isMethod && isPrivate) || isStaticBlock) {\n      const replaced = replaceThisContext(\n        prop,\n        ref,\n        getSuperRef,\n        state,\n        isStaticBlock,\n        constantSuper,\n        innerBindingRef,\n      );\n      needsClassRef = needsClassRef || replaced;\n    }\n\n    // TODO(ts): there are so many `ts-expect-error` inside cases since\n    // ts can not infer type from pre-computed values (or a case test)\n    // even change `isStaticBlock` to `t.isStaticBlock(prop)` will not make prop\n    // a `NodePath<t.StaticBlock>`\n    // this maybe a bug for ts\n    switch (true) {\n      case isStaticBlock: {\n        const blockBody = (prop.node as t.StaticBlock).body;\n        // We special-case the single expression case to avoid the iife, since\n        // it's common.\n        if (blockBody.length === 1 && t.isExpressionStatement(blockBody[0])) {\n          staticNodes.push(blockBody[0] as t.ExpressionStatement);\n        } else {\n          staticNodes.push(template.statement.ast`(() => { ${blockBody} })()`);\n        }\n        break;\n      }\n      case isStatic && isPrivate && isField && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateFieldInitLoose(t.cloneNode(ref), prop, privateNamesMap),\n        );\n        break;\n      case isStatic && isPrivate && isField && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateStaticFieldInitSpec(prop, privateNamesMap),\n        );\n        break;\n      case isStatic && isPublic && isField && setPublicClassFields:\n        // Functions always have non-writable .name and .length properties,\n        // so we must always use [[Define]] for them.\n        // It might still be possible to a computed static fields whose resulting\n        // key is \"name\" or \"length\", but the assumption is telling us that it's\n        // not going to happen.\n        // @ts-expect-error checked in switch\n        if (!isNameOrLength(prop.node)) {\n          needsClassRef = true;\n          // @ts-expect-error checked in switch\n          staticNodes.push(buildPublicFieldInitLoose(t.cloneNode(ref), prop));\n          break;\n        }\n      // falls through\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.cloneNode(ref), prop, state),\n        );\n        break;\n      case isInstance && isPrivate && isField && privateFieldsAsProperties:\n        instanceNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateFieldInitLoose(t.thisExpression(), prop, privateNamesMap),\n        );\n        break;\n      case isInstance && isPrivate && isField && !privateFieldsAsProperties:\n        instanceNodes.push(\n          buildPrivateInstanceFieldInitSpec(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            state,\n          ),\n        );\n        break;\n      case isInstance && isPrivate && isMethod && privateFieldsAsProperties:\n        instanceNodes.unshift(\n          buildPrivateMethodInitLoose(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isInstance && isPrivate && isMethod && !privateFieldsAsProperties:\n        instanceNodes.unshift(\n          buildPrivateInstanceMethodInitSpec(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            state,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isStatic && isPrivate && isMethod && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(\n          // @ts-expect-error checked in switch\n          buildPrivateStaticFieldInitSpec(prop, privateNamesMap),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isStatic && isPrivate && isMethod && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(\n          buildPrivateStaticMethodInitLoose(\n            t.cloneNode(ref),\n            // @ts-expect-error checked in switch\n            prop,\n            state,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isInstance && isPublic && isField && setPublicClassFields:\n        // @ts-expect-error checked in switch\n        instanceNodes.push(buildPublicFieldInitLoose(t.thisExpression(), prop));\n        break;\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        instanceNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.thisExpression(), prop, state),\n        );\n        break;\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n    wrapClass(path: NodePath<t.Class>) {\n      for (const prop of props) {\n        prop.remove();\n      }\n\n      if (injectSuperRef) {\n        path.scope.push({ id: t.cloneNode(injectSuperRef) });\n        path.set(\n          \"superClass\",\n          t.assignmentExpression(\"=\", injectSuperRef, path.node.superClass),\n        );\n      }\n\n      if (!needsClassRef) return path;\n\n      if (path.isClassExpression()) {\n        path.scope.push({ id: ref });\n        path.replaceWith(\n          t.assignmentExpression(\"=\", t.cloneNode(ref), path.node),\n        );\n      } else if (!path.node.id) {\n        // Anonymous class declaration\n        path.node.id = ref;\n      }\n\n      return path;\n    },\n  };\n}\n"],"mappings":"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"}