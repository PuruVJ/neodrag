var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  fastDimension: () => fastDimension
});
var import_magic_string = __toModule(require("magic-string"));
var import_compiler = __toModule(require("svelte/compiler"));
var bindingNames = ["clientWidth", "clientHeight", "offsetWidth", "offsetHeight"];
var bindings = bindingNames.map((n) => "bind:" + n);
function fastDimension() {
  return {
    markup({ content, filename }) {
      if (!bindings.some((b) => content.includes(b)))
        return;
      const s = new import_magic_string.default(content);
      const ast = (0, import_compiler.parse)(content, { filename });
      const elementToCompiledExpressions = new Map();
      (0, import_compiler.walk)(ast.html, {
        enter(node, parent) {
          if (node.type === "Binding" && bindingNames.includes(node.name)) {
            if (!elementToCompiledExpressions.has(parent))
              elementToCompiledExpressions.set(parent, []);
            const expressions = elementToCompiledExpressions.get(parent);
            const boundVar = s.slice(node.expression.start, node.expression.end);
            expressions.push(`${boundVar} = e.target.${node.name}`);
            s.overwrite(node.start, node.end, "");
          }
        }
      });
      const importText = 'import { resize as ___resize } from "svelte-fast-dimension/action";';
      if (ast.module) {
        s.appendLeft(ast.module.content.start, importText);
      } else if (ast.instance) {
        s.appendLeft(ast.instance.content.start, importText);
      } else {
        s.append(`<script>${importText}<\/script>`);
      }
      for (const [element, compiledExpressions] of elementToCompiledExpressions) {
        s.appendLeft(element.attributes[0].start, `use:___resize on:fd:resize={(e) => { ${compiledExpressions.join("; ")} }} `);
      }
      return {
        code: s.toString(),
        map: s.generateMap({ hires: true })
      };
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fastDimension
});
