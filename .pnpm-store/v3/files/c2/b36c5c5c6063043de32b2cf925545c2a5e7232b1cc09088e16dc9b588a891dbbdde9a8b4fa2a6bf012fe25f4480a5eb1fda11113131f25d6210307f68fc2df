{"version":3,"sources":["../index.ts"],"sourcesContent":["import {writable as internal, get, Writable} from 'svelte/store'\n\ndeclare type Updater<T> = (value: T) => T;\ndeclare type StoreDict<T> = { [key: string]: Writable<T> }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst stores: StoreDict<any> = {}\n\ninterface Serializer<T> {\n  parse(text: string): T\n  stringify(object: T): string\n}\n\ntype StorageType = 'local' | 'session'\n\ninterface Options<T> {\n  serializer?: Serializer<T>\n  storage?: StorageType\n}\n\nfunction getStorage(type: StorageType) {\n  return type === 'local' ? localStorage : sessionStorage\n}\n\nexport function writable<T>(key: string, initialValue: T, options?: Options<T>): Writable<T> {\n  const serializer = options?.serializer ?? JSON\n  const storageType = options?.storage ?? 'local'\n  const browser = typeof(window) !== 'undefined' && typeof(document) !== 'undefined'\n\n  function updateStorage(key: string, value: T) {\n    if (!browser) return\n\n    getStorage(storageType).setItem(key, serializer.stringify(value))\n  }\n\n  if (!stores[key]) {\n    const store = internal(initialValue, (set) => {\n      const json = browser ? getStorage(storageType).getItem(key) : null\n\n      if (json) {\n        set(<T>serializer.parse(json))\n      }\n\n      if (browser) {\n        const handleStorage = (event: StorageEvent) => {\n          if (event.key === key)\n            set(event.newValue ? serializer.parse(event.newValue) : null)\n        }\n\n        window.addEventListener(\"storage\", handleStorage)\n\n        return () => window.removeEventListener(\"storage\", handleStorage)\n      }\n    })\n\n    const {subscribe, set} = store\n\n    stores[key] = {\n      set(value: T) {\n        updateStorage(key, value)\n        set(value)\n      },\n      update(updater: Updater<T>) {\n        const value = updater(get(store))\n\n        updateStorage(key, value)\n        set(value)\n      },\n      subscribe\n    }\n  }\n\n  return stores[key]\n}\n"],"mappings":";AAAA;AAMA,IAAM,SAAyB,CAAC;AAchC,oBAAoB,MAAmB;AACrC,SAAO,SAAS,UAAU,eAAe;AAC3C;AAEO,kBAAqB,KAAa,cAAiB,SAAmC;AAC3F,QAAM,aAAa,oCAAS,eAAc;AAC1C,QAAM,cAAc,oCAAS,YAAW;AACxC,QAAM,UAAU,OAAO,WAAY,eAAe,OAAO,aAAc;AAEvE,yBAAuB,MAAa,OAAU;AAC5C,QAAI,CAAC;AAAS;AAEd,eAAW,WAAW,EAAE,QAAQ,MAAK,WAAW,UAAU,KAAK,CAAC;AAAA,EAClE;AAEA,MAAI,CAAC,OAAO,MAAM;AAChB,UAAM,QAAQ,SAAS,cAAc,CAAC,SAAQ;AAC5C,YAAM,OAAO,UAAU,WAAW,WAAW,EAAE,QAAQ,GAAG,IAAI;AAE9D,UAAI,MAAM;AACR,aAAO,WAAW,MAAM,IAAI,CAAC;AAAA,MAC/B;AAEA,UAAI,SAAS;AACX,cAAM,gBAAgB,CAAC,UAAwB;AAC7C,cAAI,MAAM,QAAQ;AAChB,iBAAI,MAAM,WAAW,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI;AAAA,QAChE;AAEA,eAAO,iBAAiB,WAAW,aAAa;AAEhD,eAAO,MAAM,OAAO,oBAAoB,WAAW,aAAa;AAAA,MAClE;AAAA,IACF,CAAC;AAED,UAAM,EAAC,WAAW,QAAO;AAEzB,WAAO,OAAO;AAAA,MACZ,IAAI,OAAU;AACZ,sBAAc,KAAK,KAAK;AACxB,YAAI,KAAK;AAAA,MACX;AAAA,MACA,OAAO,SAAqB;AAC1B,cAAM,QAAQ,QAAQ,IAAI,KAAK,CAAC;AAEhC,sBAAc,KAAK,KAAK;AACxB,YAAI,KAAK;AAAA,MACX;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,OAAO;AAChB;","names":[]}