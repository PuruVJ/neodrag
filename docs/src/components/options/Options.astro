---
type OptionsFrontMatter = {
	title: string;
	type: string;
	defaultValue: string;
};

const ORDER = ['axis', 'bounds', 'gpuAcceleration', 'applyUserSelectHack'];

const optionsMD = await Astro.glob<OptionsFrontMatter>('./content/*/+*.option.mdx');

if (optionsMD.length > ORDER.length) {
	const excludedOptions = optionsMD
		.map((o) => o.frontmatter.title)
		.filter((o) => !ORDER.includes(o));

	throw new Error(`Add \`${excludedOptions.join(', ')}\` properties to ORDER array`);
}

const orderedOptionsMD = ORDER.map(
	(property) => optionsMD.find((option) => option.frontmatter.title === property)!
);
---

{
	orderedOptionsMD.map(({ Content, frontmatter: { defaultValue, title, type } }) => (
		<>
			<h2>{title}</h2>
			Type: <code>{type}</code> <br />
			Default Value: <code>{defaultValue}</code> <br />
			<Content />
			<>
				<br />
				<br />
			</>
		</>
	))
}

<style lang="scss"></style>
