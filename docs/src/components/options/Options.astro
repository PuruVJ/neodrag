---
type OptionsFrontMatter = {
	title: string;
	type: string;
	defaultValue: string;
	shortDescription: string;
};

const ORDER = [
	'axis',
	'bounds',
	'grid',
	'position',
	'gpuAcceleration',
	'applyUserSelectHack',
	'ignoreMultitouch',
	'disabled',
];

const optionsMD = await Astro.glob<OptionsFrontMatter>('../../content/*/+option.mdx');

function validate() {
	if (optionsMD.length > ORDER.length) {
		const excludedOptions = optionsMD
			.map((o) => o.frontmatter.title)
			.filter((o) => !ORDER.includes(o));

		throw new Error(`Add \`${excludedOptions.join(', ')}\` properties to ORDER array`);
	}

	for (const option of optionsMD) {
		// @ts-ignore
		if (!option.shortDescription) {
			throw new Error(`Add \`shortDescription\` to ${option.frontmatter.title}`);
		}
	}
}

validate();

const orderedOptionsMD = ORDER.map(
	(property) => optionsMD.find((option) => option.frontmatter.title === property)!
) as typeof optionsMD & { shortDescription: string }[];
---

{
	orderedOptionsMD.map(({ Content, frontmatter: { defaultValue, title, type } }) => (
		<>
			<h2>{title}</h2>
			Type: <code>{type}</code> <br />
			Default Value: <code>{defaultValue}</code> <br />
			<Content />
			<>
				<br />
				<br />
			</>
		</>
	))
}

<style lang="scss"></style>
